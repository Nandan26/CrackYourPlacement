Q-9 :- Word Search ||
class Solution {
    public List<String> findWords(char[][] board, String[] words) {
        HashSet<String> res = new HashSet<>();
        
        for(String word: words){
            boolean[][] visited = new boolean[board.length][board[0].length];
            
            int count = 0;
            
            for(int i=0; i<board.length; i++){
                for(int j=0; j<board[0].length; j++){
                    if(board[i][j] == word.charAt(0) && dfs(board, i, j, count, word, visited)){
                        res.add(word);
                        break;
                    }
                }
            }
        }
        List<String> ans = new ArrayList<>(res);
        
        return ans;
    }
    
    private boolean dfs(char[][] board, int i, int j, int count, String word, boolean[][] visited){
        if(count == word.length())
            return true;
        
        if(i<0 || i>=board.length || j<0 || j>=board[0].length || 
           board[i][j] != word.charAt(count) || visited[i][j])
            return false;
        
        visited[i][j] = true;
        
        boolean found = dfs(board, i-1, j, count+1, word, visited) ||
                        dfs(board, i, j+1, count+1, word, visited) ||
                        dfs(board, i+1, j, count+1, word, visited) ||
                        dfs(board, i, j-1, count+1, word, visited);
        
        visited[i][j] = false;
        
        return found;
    }
}

Q-10 :- Sudoku Solver

class Solution {
    public void solveSudoku(char[][] board) {
        Set<String> set = new HashSet<>();

        for(int row = 0; row <= 8; row++) {
            for(int col = 0; col <= 8; col++) {
                if(board[row][col] != '.') {
                    set.add(board[row][col] + "in row " + row);
                    set.add(board[row][col] + "in column " + col);
                    set.add(board[row][col] + "in box " + row / 3 + "-" + col / 3); 
                }
            }
        }
        
        helper(board, set);
    }
    
    private boolean helper(char[][] board, Set<String> set) {        
        for(int row = 0; row <= 8; row++) {
            for(int col = 0; col <= 8; col++) {
                if(board[row][col] == '.') {
                    for(char num = '1'; num <= '9'; num++) {
                        
                        if(set.contains(num + "in row " + row) || 
                        set.contains(num + "in column " + col) || 
                        set.contains(num + "in box " + row / 3 + "-" + col / 3)) 
                            continue;

                        board[row][col] = num;

                        set.add(board[row][col] + "in row " + row);
                        set.add(board[row][col] + "in column " + col);
                        set.add(board[row][col] + "in box " + row / 3 + "-" + col / 3);

                        if(helper(board, set)) return true;
                            
                        set.remove(board[row][col] + "in row " + row);
                        set.remove(board[row][col] + "in column " + col);
                        set.remove(board[row][col] + "in box " + row / 3 + "-" + col / 3);

                        board[row][col] = '.';   
                    } 
                    return false;
                }
            }
        }
        return true;
    }
}

Q-11 :- N-Queens
class Solution {
    public List<List<String>> solveNQueens(int n) {
        char[][] board = new char[n][n];
        for (int i = 0; i < n; i++)
            
            for (int j = 0; j < n; j++)
            
                board[i][j] = '.';
        List<List<String>> res = new ArrayList<List<String>> ();
        int leftRow[] = new int[n];
        int upperDiagonal[] = new int[2 * n - 1];
        int lowerDiagonal[] = new int[2 * n - 1];
        solve(0, board, res, leftRow, lowerDiagonal, upperDiagonal);
        return res;
    }



    private void solve(int col, char[][] board, List < List < String >> res, int leftRow[], int lowerDiagonal[], int upperDiagonal[]) {
        if (col == board.length) {
            res.add(construct(board));
            return;
        }

        for (int row = 0; row < board.length; row++) {
            if (leftRow[row] == 0 && lowerDiagonal[row + col] == 0 && upperDiagonal[board.length - 1 + col - row] == 0) {
                board[row][col] = 'Q';
                leftRow[row] = 1;
                lowerDiagonal[row + col] = 1;
                upperDiagonal[board.length - 1 + col - row] = 1;
                solve(col + 1, board, res, leftRow, lowerDiagonal, upperDiagonal);
                board[row][col] = '.';
                leftRow[row] = 0;
                lowerDiagonal[row + col] = 0;
                upperDiagonal[board.length - 1 + col - row] = 0;
            }
        }
    }
}

Q-12 :- Unique Paths III
class Solution {
    int ans=0;
    int dir[][]={{1,0},{-1,0},{0,-1},{0,1}};
    public void TotalPath(int grid[][],int row,int col,int count){
        if(row<0 || col<0 ||  col>=grid[0].length || row>=grid.length || grid[row][col]==-1 || grid[row][col]==-2){
            return;
        }
        if(grid[row][col]==2 && count<0){
            ans++;
            
            return;
        }
        int originalvalue=grid[row][col];
        grid[row][col]=-2;
        for(int i=0;i<dir.length;i++){
            int newX=dir[i][0]+row;
            int newY=dir[i][1]+col;
            TotalPath(grid,newX,newY,count-1);
            
        }
        grid[row][col]=originalvalue;
    }
    public int uniquePathsIII(int[][] grid) {
        int posscount=0;
        for(int i=0;i<grid.length;i++){
            for(int j=0;j<grid[0].length;j++){
                if(grid[i][j]==0){
                    posscount++;
                }
            }
        }
        for(int i=0;i<grid.length;i++){
            for(int j=0;j<grid[0].length;j++){
                if(grid[i][j]==1){
                    TotalPath(grid,i,j,posscount);
                }
            }
        }
        return ans;
    }
}

Q-13 :- Find Maximum number possible by doing at-most K swaps
class Solution
{
    public void findMaximum(String str, int k) {
		if (k == 0) {
			return;
		}

		for (int i = 0; i < str.length() - 1; i++) {
			for (int j = i + 1; j < str.length(); j++) {
				if (str.charAt(i) < str.charAt(j)) {
					str = swap(str, i, j);

					if (Integer.parseInt(str) > Integer.parseInt(max)) {
						max = str;
					}

					findMaximum(str, k - 1);
					str = swap(str, i, j);
				}
			}
		}
	}
	private String swap(String str, int i, int j) {
		char ith = str.charAt(i);
		char jth = str.charAt(j);

		String left = str.substring(0, i);
		String middle = str.substring(i + 1, j);
		String right = str.substring(j + 1);

		return left + jth + middle + ith + right;
	}
}

Q-14 :- Partition of a set into K subsets with equal sum
class Solution {
    public boolean canPartitionKSubsets(int[] nums, int k) {
        if (k > nums.length) return false;
        int target = 0;
        for (int num : nums) target+=num;
       
        if (target % k != 0) return false;
        Arrays.sort(nums);

        return dfs(nums, new boolean[nums.length], k, 0, target / k, nums.length - 1);
    }

    private boolean dfs(int[] nums, boolean[] visited, int totalss, int currentSum, int targetSum, int position) {
        
        if (totalss == 0) return true;

        if (currentSum == targetSum) return dfs(nums, visited, totalss - 1, 0, targetSum, nums.length - 1);

        for (int i = position; i >= 0; i--) {
            
            if (visited[i]) continue;

            if (i + 1 < nums.length && nums[i] == nums[i + 1] && !visited[i + 1]) continue;

            if (currentSum + nums[i] > targetSum) continue;

            visited[i] = true;
            if (dfs(nums, visited, totalss, currentSum + nums[i], targetSum, i - 1)) return true;
            visited[i] = false;
        }
        return false;
    }
}

Q-15 :- Tug of War
class Solution{
    static int mindiff = Integer.MAX_VALUE;
	static String ans = "";
    public static void solve(int[] arr){
        solve(arr, 0, new ArrayList<>(), new ArrayList<>(), 0, 0);
        return ans;
    }
    
    private void solve(int[] arr, int vidx, ArrayList<Integer> set1, ArrayList<Integer> set2, int soset1,
			int soset2) {
		if (vidx == arr.length) {
			if (Math.abs(soset1 - soset2) < mindiff) {
				mindiff = Math.abs(soset1 - soset2);
				ans = set1 + " " + set2;
			}
			return;
		}

		if (set1.size() < (arr.length + 1) / 2) {
			set1.add(arr[vidx]);
			solve(arr, vidx + 1, set1, set2, soset1 + arr[vidx], soset2);
			set1.remove(set1.size() - 1);
		}

		if (set2.size() < (arr.length + 1) / 2) {
			set2.add(arr[vidx]);
			solve(arr, vidx + 1, set1, set2, soset1, soset2 + arr[vidx]);
			set2.remove(set2.size() - 1);
		}
	}
}

Q-16 :- Find paths from corner cell to middle cell in maze
class Solution{
    
    public static void printPath(int[][] maze, int i, int j, String ans){

        if (i == maze.length/2 && j==maze.length/2){

            ans += "("+i+", "+j+") -> MID";
            System.out.println(ans);
            return;
        }

        if (maze[i][j]==0){
            return;
        }

        int k = maze[i][j];

        maze[i][j]=0;

        if (j+k<maze.length){
            printPath(maze, i, j+k, ans+"("+i+", "+j+") -> ");
        }

        if (i+k<maze.length){
            printPath(maze, i+k, j, ans+"("+i+", "+j+") -> ");
        }

        if (j-k>0){
            printPath(maze, i, j-k, ans+"("+i+", "+j+") -> ");
        }

        if (i-k>0){
            printPath(maze, i-k, j, ans+"("+i+", "+j+") -> ");
        }

        maze[i][j] = k;
    }
}

Q-17 :- Solving Cryptarithmetic Puzzles
class Solution{
    
    public static boolean isSolvable(String[] words,
                                     String result)
    {
        int map[] = new int[26];

        int used[] = new int[10];

        int Hash[] = new int[26];

        int CharAtfront[] = new int[26];
 
        Arrays.fill(map, -1);
        Arrays.fill(used, 0);
        Arrays.fill(Hash, 0);
        Arrays.fill(CharAtfront, 0);

        StringBuilder uniq = new StringBuilder();

        for (String word : words) {
 
            for (int i = 0; i < word.length(); i++) {

                char ch = word.charAt(i);

                Hash[ch - 'A'] += (int)Math.pow(
                    10, word.length() - i - 1);

                if (mp[ch - 'A'] == -1) {
 
                    mp[ch - 'A'] = 0;
                    uniq.append((char)ch);
                }

                if (i == 0 && word.length() > 1) {
 
                    CharAtfront[ch - 'A'] = 1;
                }
            }
        }

        for (int i = 0; i < result.length(); i++) {
 
            char ch = result.charAt(i);
 
            Hash[ch - 'A'] -= (int)Math.pow(
                10, result.length() - i - 1);

            if (map[ch - 'A'] == -1) {
                map[ch - 'A'] = 0;
                uniq.append((char)ch);
            }

            if (i == 0 && result.length() > 1) {
                CharAtfront[ch - 'A'] = 1;
            }
        }
 
        Arrays.fill(map, -1);

        return solve(uniq, 0, 0, map, used, Hash,
                     CharAtfront);
    }
 

    public static boolean solve(StringBuilder words, int i,int S, int[] mp, int[] used,int[] Hash,int[] CharAtfront)
    {
        if (i == words.length())
 
            return (S == 0);
 

        char ch = words.charAt(i);

        int val = mp[words.charAt(i) - 'A'];

        if (val != -1) {

            return solve(words, i + 1, S + val * Hash[ch - 'A'], mp, used, Hash, CharAtfront);
        }
 

        boolean x = false;
 

        for (int l = 0; l < 10; l++) {
 

            if (CharAtfront[ch - 'A'] == 1
                && l == 0)
                continue;

            if (used[l] == 1)
                continue;

            mp[ch - 'A'] = l;

            used[l] = 1;

            x |= solve(words, i + 1,S + l * Hash[ch - 'A'],mp, used, Hash, CharAtfront);

            mp[ch - 'A'] = -1;

            used[l] = 0;
        }

        return x;
    }
} 

Q-18 :- Print all palindromic partitions of a string
class Solution {
    public List<List<String>> partition(String s) {
        List<List<String>> ans = new ArrayList<>();
        boolean[][] dp = new boolean[s.length()][s.length()];
        for(int i = 0; i < s.length(); i++) {
            for(int j = 0; j <= i; j++) {
                if(s.charAt(i) == s.charAt(j) && (i - j < 3 || dp[j+1][i-1])) {
                    dp[j][i] = true;
                }
            }
        }
        
        backtrack(ans, new ArrayList<>(), dp, s, 0);
        return ans;
    }
    private void backtrack(List<List<String>> ans, List<String> psf, boolean[][] dp, String s, int startpos) {
        if(startpos == s.length()) {
            ans.add(new ArrayList<>(psf));
            return;
        }
        
        for(int i = startpos; i < s.length(); i++) {
            if(dp[startpos][i]) {
                psf.add(s.substring(startpos,i+1));
                backtrack(ans, psf, dp, s, i+1);
                psf.remove(psf.size()-1);
            }
        }
    }
}

