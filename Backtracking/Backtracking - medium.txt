Q-1 :- Combination Sum ||
class Solution {
    private void helper(int[] arr, int rem, List<List<Integer>> ans, List<Integer> asf ,int idx){
        if(rem ==0 ){
            ans.add(new ArrayList(asf));
            return;
        }
        for(int i=idx;i<arr.length;i++){
            if(i>idx && arr[i-1] == arr[i]) continue;
            
            if(arr[i] > rem) 
                break;
            
            asf.add(arr[i] );
            
            helper(arr, rem-arr[i],ans, asf, i+1 );
            
            asf.remove(asf.size()-1 );
            
        }
    }
    
    public List<List<Integer>> combinationSum2(int[] candidates, int target) {
        List<List<Integer>> ans = new ArrayList<>();
        List<Integer> asf = new ArrayList<>();
        Arrays.sort(candidates);
        helper(candidates,target,ans, asf,0 );
        return ans;
    }
}

Q-2 :- Partition Equal Subset Sum
class Solution {
    public boolean canPartition(int[] nums) {
        int n=nums.length;
        
        int target=0;
        for(int num:nums){
            target+=num;
        }
        if(target%2!=0) return false;
        
        target=target/2;
        
        boolean dp[][] = new boolean[n+1][target+1];
        
        for(int i=0;i<=n;i++){
            for(int j=0;j<=target;j++){
                if(i==0 || j==0)
                    dp[i][j] = false;
                else if(nums[i-1] > j)
                    dp[i][j] = dp[i-1][j];
                else if(nums[i-1]==j)
                    dp[i][j] = true;
                else
                    dp[i][j] = dp[i-1][j] || dp[i-1][j-nums[i-1]];
            }
        }
        return dp[n][target];
        
    }
}

Q-3 :- Combinations
class Solution {
    public List<List<Integer>> combine(int n, int k) {
        List<List<Integer>> ans=new ArrayList<>();
        if(k==0) return null;
        helper(1,k,n,new ArrayList<Integer>(),ans);
        
        return ans;
    }
    private void helper(int curr,int k,int n,List<Integer> temp,List<List<Integer>> ans){
        if(curr> n+1) return;
        if(k==0 && curr<=n+1){
            ans.add(new ArrayList<>(temp));
            return;
        }
        temp.add(curr);

        helper(curr+1, k-1, n,temp, ans);
        temp.remove(temp.size() - 1);
        helper(curr+1, k, n,temp, ans);

    }
}

Q-4 :- Subsets II
class Solution {
    public List<List<Integer>> subsetsWithDup(int[] nums) {
        List<List<Integer>> list = new ArrayList<>();
        Arrays.sort(nums);
        backtrack(list, new ArrayList<>(), nums, 0);
        return list;
    }

    private void backtrack(List<List<Integer>> list, List<Integer> tempList, int [] nums, int start){
        list.add(new ArrayList<>(tempList));
        for(int i = start; i < nums.length; i++){
            if(i > start && nums[i] == nums[i-1]) continue;
            tempList.add(nums[i]);
            backtrack(list, tempList, nums, i + 1);
            tempList.remove(tempList.size() - 1);
        }
    } 
}

Q-5 :- M â€“ Coloring Problem
class Solution {
    public static boolean graphColoring(List<Integer> [] G, int[] color, int i, int C) {
        // Your code here
        int n = G.length;
        if (solve(i, G, color, n, C) == true) return true;
        return false;
    }
    private static boolean isSafe(int node, List<Integer> [] G, int[] color, int n, int col) {
        for (int it: G[node]) {
            if (color[it] == col) return false;
        }
        return true;
    }
    private static boolean solve(int node, List<Integer> [] G, int[] color, int n, int m) {
        if (node == n) return true;

        for (int i = 1; i <= m; i++) {
            if (isSafe(node, G, color, n, i)) {
                color[node] = i;
                if (solve(node + 1, G, color, n, m) == true) return true;
                color[node] = 0;
            }
        }
        return false;
    }
}

Q-6 :- Beutiful Arrangement
class Solution {
    public int countArrangement(int n) {
        return helper(n, 1, new boolean[n + 1]);
    }

    private int helper(int n, int pos, boolean[] vis) {
        if (pos > n) {
            return 1;
        }
        int count = 0;
        for (int i = 1; i <= n; i++) {
            if (vis[i] == false && (pos % i == 0 || i % pos == 0)) {
                visited[i] = true;
                count += helper(n, pos + 1, visited);
                visited[i] = false;
            }
        }
        return count;
    }
}

Q-7 :- Palindrome Partitioning
class Solution {
    public List<List<String>> partition(String s) {
        List<List<String>> ans = new ArrayList<>();
        boolean[][] dp = new boolean[s.length()][s.length()];
        for(int i = 0; i < s.length(); i++) {
            for(int j = 0; j <= i; j++) {
                if(s.charAt(i) == s.charAt(j) && (i - j < 3 || dp[j+1][i-1])) {
                    dp[j][i] = true;
                }
            }
        }
        
        backtrack(ans, new ArrayList<>(), dp, s, 0);
        return ans;
    }
    private void backtrack(List<List<String>> ans, List<String> psf, boolean[][] dp, String s, int startpos) {
        if(startpos == s.length()) {
            ans.add(new ArrayList<>(psf));
            return;
        }
        
        for(int i = startpos; i < s.length(); i++) {
            if(dp[startpos][i]) {
                psf.add(s.substring(startpos,i+1));
                backtrack(ans, psf, dp, s, i+1);
                psf.remove(psf.size()-1);
            }
        }
    }
}

Q-8 :- Permutations II
class Solution
{
    public List<List<Integer>> permuteUnique(int[] nums) {
        List < List < Integer >> ans = new ArrayList < > ();
        recurPermute(0, nums, ans);
        return ans;
    }
    private void recurPermute(int index, int[] nums, List < List < Integer >> ans){
        
        if (index == nums.length) {
            // copy the ds to ans
            List < Integer > ds = new ArrayList < > ();
            for (int i = 0; i < nums.length; i++) {
                ds.add(nums[i]);
            }
            ans.add(new ArrayList < > (ds));
            return;
        }
        for (int i = index; i < nums.length; i++) {
            if(i>0 && nums[i]==nums[i-1]) continue;
            swap(i, index, nums);
            recurPermute(index + 1, nums, ans);
            swap(i, index, nums);
        }
    }
    private void swap(int i, int j, int[] nums) {
        int t = nums[i];
        nums[i] = nums[j];
        nums[j] = t;
    }
}

 