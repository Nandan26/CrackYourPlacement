Q-1 :- Maximum size rectangle binary sub-matrix with all 1s

class Solution {
    public int maximalRectangle(char[][] matrix) {
	    int m = matrix.length;
        if( m==0 ) return 0;
        int n = matrix[0].length;

		int i, j, ans = 0;
		int[] heights = new int[n];
		for (i = 0; i < m; i++) {
			for (j = 0; j < n; j++) {
				if (matrix[i][j] == '0')
					heights[j] = 0;
				else
					heights[j] += 1;
			}
			ans = Math.max(ans, MAH(heights));
		}

		return ans;
	}

    private int MAH(int nums[]){
        int n= nums.length;
        int ans = 0;
        Stack<Integer> stack = new Stack<>();
        int left[] = new int[n];
        int right[] = new int[n];
        for (int i = 0; i < n; i++) {
            left[i] = -1;
        }
        for (int i = 0; i < n; i++) {
            right[i] = n;
        }
        for (int i = n-1; i >=0; i--) {
            while (!stack.isEmpty()&&nums[stack.peek()]>=nums[i]) {                     
                left[stack.pop()] = i;
            }
            stack.add(i);
        }
        stack.clear();
        for (int i = 0; i < n; i++) {
            while (!stack.isEmpty()&&nums[stack.peek()]>nums[i]) {                     
                right[stack.pop()] = i;
            }
            stack.add(i);
        }
        for (int i = 0; i < n; i++) {
            ans = Math.max(ans, (right[i]-left[i]-1)*nums[i]);
        }
        return ans;
    }

}

Q-2 :- Number of islands
class Solution {
    private int[][] dirs={{-1,0},{1,0},{0,-1},{0,1}};
    public int numIslands(char[][] arr) {
        boolean [][] visited=new boolean[arr.length][arr[0].length];
        int count=0;
        for(int i=0;i<arr.length;i++){
            for(int j =0;j<arr[i].length;j++){
                if(arr[i][j]=='1' && visited[i][j]==false){
                    dfs(arr,i,j,visited);
                    count++;
                }
            }
        }
        return count;
    }
    
    private void dfs(char [][]arr,int i,int j,boolean[][] visited){
        if(i<0 || j<0|| i>=arr.length ||j>=arr[i].length ||arr[i][j]=='0' || visited[i][j]==true ){
            return;
        }
       
        visited[i][j]=true;
        
        for(int[] dir:dirs){
            dfs(arr,i+dir[0],j+dir[1],visited);
        }

   }
}

Q-3 :- Given a matrix of ‘O’ and ‘X’, replace ‘O’ with ‘X’ if surrounded by ‘X’
class Solution {
    public void dfs(char[][] arr,int i, int j){
        if(i<0 || j<0 || i>=arr.length || j>= arr[0].length || arr[i][j] == 'X' || arr[i][j]=='P'){
            return;
        }
        
        arr[i][j]='P';
        dfs(arr,i-1,j);
        dfs(arr,i,j+1);
        dfs(arr,i+1,j);
        dfs(arr,i,j-1);
    }
    public void solve(char[][] board) {
        
        for(int i=0;i<board.length;i++){
            for(int j=0;j<board[0].length;j++){
                if(i==0 || i== board.length-1 || j==0 || j==board[0].length-1){
                    if(board[i][j]=='O' || board[i][j]=='P'){
                        dfs(board,i,j);
                    }
                }
            }
            
        }
        
        for(int i=0;i<board.length;i++){
            for(int j=0;j<board[0].length;j++){
                if(board[i][j]=='P'){
                    board[i][j]='O';
                }
                else if(board[i][j]=='O'){
                    board[i][j]='X';
                }
            }
            
        }
    }
}

Q-4 :- Spiral Matrix
class Solution {
    public List<Integer> spiralOrder(int[][] matrix) {
        List<Integer> res = new ArrayList<Integer>();
        //if(matrix.length == 0 || matrix[0].length == 0) return res;
        
        int maxrow = matrix.length-1;
        int minrow=0,mincol=0;
        int maxcol = matrix[0].length-1;
        int cnt=0;
        int total=matrix[0].length*matrix.length;
        while(cnt<total){
            for(int i = minrow,j=mincol; j <= maxcol && cnt<total; j++){
                res.add(matrix[i][j]);
                cnt++;
            } 
            minrow++;
            
            for(int i = minrow,j=maxcol; i <= maxrow && cnt<total; i++){
                res.add(matrix[i][j]);
                cnt++;
            } 
            maxcol--;
            
            for(int i = maxrow,j=maxcol; j >= mincol && cnt<total; j--){
                res.add(matrix[i][j]);
                cnt++;
            } 
            maxrow--;

            
            for(int i = maxrow,j=mincol; i >= minrow && cnt<total; i--){
                res.add(matrix[i][j]);
                cnt++;
            } 
            mincol++;
        }
        
        return res;
    }
    
}

Q-5 :- Rotate image
class Solution {
    public void rotate(int[][] matrix) {
        int n=matrix.length;
        int m=matrix[0].length;
        for(int i = 0; i<matrix.length; i++){
            for(int j = i; j<matrix[0].length; j++){
                int temp = 0;
                temp = matrix[i][j];
                matrix[i][j] = matrix[j][i];
                matrix[j][i] = temp;
            }
        }
        for(int i =0 ; i<matrix.length; i++){
            for(int j = 0; j<matrix.length/2; j++){
                int temp = 0;
                temp = matrix[i][j];
                matrix[i][j] = matrix[i][matrix.length-1-j];
                matrix[i][matrix.length-1-j] = temp;
            }
        }
    }
}

