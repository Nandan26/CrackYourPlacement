Q-1 :- Range Sum Query - Immutable
class NumArray {

    int[] pre;

    public NumArray(int[] nums) {

        pre = new int[nums.length + 1];

        for (int i = 1; i <= nums.length; i++) {
            pre[i] = pre[i - 1] + nums[i - 1];
        }
    }

    public int sumRange(int left, int right) {

        return pre[right + 1] - pre[left];
    }
}

Q-2 :- Range Sum Query Mutable
class NumArray {

    private SegmentTreeNode root;

    private int[] nums;

    public NumArray(int[] nums) {

        this.nums = nums;

        this.root = BuildTree(0, nums.length - 1);
    }

    public void update(int i, int val) {
        int diff = val - nums[i];
        nums[i] = val;
        update(root, i, diff);
    }

    private void update(SegmentTreeNode root, int i, int diff){
        if(root != null && root.leftIndex <= i && root.rightIndex >= i){
            root.val += diff;
            update(root.left, i, diff);
            update(root.right, i, diff);
        }
    }


    public int sumRange(int i, int j) {
        return sumRange(root, i, j);
    }

    private int sumRange(SegmentTreeNode root, int i, int j){
        if(root == null) return 0;
        else if(root.leftIndex >= i && root.rightIndex <= j)
            return root.val;
        else{
            int res = 0;
            if(i > root.rightIndex)
                res = sumRange(root.right, i, j);
            else if(j < root.leftIndex)
                res = sumRange(root.left, i, j);
            else{
                res = sumRange(root.left, i, j) + sumRange(root.right, i, j);
            } 

            return res;
        }
    }

    private int getSum(int b, int e){
        int sum = 0;
        for(int i = b; i <= e; i++)
            sum += nums[i];
        return sum;
    }

    private SegmentTreeNode BuildTree(int b, int e){
        SegmentTreeNode stn = null;
        if(b == e){
            stn = new SegmentTreeNode(b, b, nums[b]);
        }else if(b < e){
            stn = new SegmentTreeNode(b, e, getSum(b, e));
            stn.left = BuildTree(b, (b + e) / 2);
            stn.right = BuildTree((b + e) / 2 + 1, e);
        }
        return stn;
    }
}

class SegmentTreeNode{
    SegmentTreeNode left, right;
    int leftIndex, rightIndex, val;

    public SegmentTreeNode(int leftIndex, int rightIndex, int val){
        this.val = val;
        this.leftIndex = leftIndex;
        this.rightIndex = rightIndex;
    }
}


Q-3 :- Count of Smaller Numbers After Self
class Solution {
    class TreeNode {
        TreeNode left; 
        TreeNode right;
        int val;
        int smallerele = 1;
        public TreeNode(int val) {
            this.val = val;
        }
    }
	public List<Integer> countSmaller(int[] nums) {
		if(nums == null || nums.length == 0) return null;
        
        int n = nums.length;
        List<Integer> ans = new ArrayList<>();
		
		TreeNode root = new TreeNode(nums[n - 1]);
		ans.add(0);
		for(int i = n - 2; i >= 0; i--) {
			int cnt = insert(root, nums[i]);
			ans.add(cnt);
		}
		Collections.reverse(ans);
		return ans;
	}

	public int insert(TreeNode root, int val) {
		int smaller = 0;
		while(true) {
			if(val <= root.val) {
				root.smallerele++;
				if(root.left == null) {
					root.left = new TreeNode(val); 
                    break;
				} else {
					root = root.left;
				}
			} 
            else {
				smaller += root.smallerele;
				if(root.right == null) {
					root.right = new TreeNode(val); 
                    break;
				} else {
					root = root.right;
				}
			}
		}
		return smaller;
	}
}

Q-4 :- Count of Range Sum
class Solution {
    public int countRangeSum(int[] nums, int lower, int upper) {

		long[] prefixSums = new long[nums.length + 1];
		prefixSums[0] = 0;
		for (int index = 0; index < nums.length; index++) {
			if (index == 0) {
				prefixSums[index + 1] = nums[index];
			} else {
				prefixSums[index + 1] = prefixSums[index] + nums[index];
			}
		}


		long[] sortedPrefixSums = prefixSums.clone();
		Arrays.sort(sortedPrefixSums);

		int rank = 0;
		TreeMap<Long, Integer> ranks = new TreeMap<>();
		for (int index = 0; index < sortedPrefixSums.length; index++) {
			if (!ranks.containsKey(sortedPrefixSums[index])) {
				ranks.put(sortedPrefixSums[index], rank++);
			}
		}

		int count = 0;
		SegmentTree tree = new SegmentTree(0, rank);
		for (int index = prefixSums.length - 1; index >= 0; index--) {            
			Long lowerBound = ranks.floorKey(prefixSums[index] + lower - 1);
			int minRank = -1;
			if (lowerBound != null) {
				minRank = ranks.get(lowerBound) + 1;
			}

			Long upperBound = ranks.floorKey(prefixSums[index] + upper);
			int maxRank = -1;
			if (upperBound != null) {
				maxRank = ranks.get(upperBound);
			}

			count += tree.query(minRank, maxRank);

			tree.update(ranks.get(prefixSums[index]));
		}

		return count;
    }
}

class SegmentTree {
	private final int min;
	private final int max;
	private final int[] tree;

	public SegmentTree(int min, int max) {
		this.min = min;
		this.max = max;
		this.tree = new int[(max - min) * 4];
	}
	
	public int query(int min, int max) {
		return query(0, this.min, this.max, min, max);
	}
	

	private int query(int treeIndex, int lo, int hi, int min, int max) {
		if (min > hi || max < lo) {
			return 0;
		} else if (min <= lo && max >= hi) {
			return tree[treeIndex];
		}
		
		int mid = lo + (hi - lo) / 2;
		if (max <= mid) {
			return query(treeIndex * 2 + 1, lo, mid, min, max);
		} else if (min > mid) {
			return query(treeIndex * 2 + 2, mid + 1, hi, min, max);
		}
		
		int left = query(treeIndex * 2 + 1, lo, mid, min, mid);
		int right = query(treeIndex * 2 + 2, mid + 1, hi, mid + 1, max);
		
		return left + right;
	}
	
	public void update(int num) {
		update(0, this.min, this.max, num);
	}
	

	private void update(int treeIndex, int lo, int hi, int num) {
		if (lo == hi) {
			tree[treeIndex] += 1;
			return;
		}
		
		int mid = lo + (hi - lo) / 2;
		if (num <= mid) {
			update(treeIndex * 2 + 1, lo, mid, num);
		} else {
			update(treeIndex * 2 + 2, mid + 1, hi, num);
		}
		
		tree[treeIndex] = tree[treeIndex * 2 + 1] + tree[treeIndex * 2 + 2];
	}
}