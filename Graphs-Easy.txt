Q-1 :- BFS traversal of Graph
class Solution {
    public static ArrayList<Integer> bfsOfGraph(int V, ArrayList <ArrayList<Integer>> adj) {

        ArrayList <Integer> ans = new ArrayList <>();
        boolean vis[] = new boolean[V];
        Queue <Integer> q = new LinkedList <>();

        q.add(0);
        vis[0] = true;

        while (!q.isEmpty()) {
            Integer node = q.poll();
            ans.add(node);

            for (Integer it: adj.get(node)) {
                if (vis[it] == false) {
                    vis[it] = true;
                    q.add(it);
                }
            }
        }
        return ans;
    }
}

Q-2 :- DFS traversal of Graph
class Solution
{
    private static void dfshelper(int node, boolean vis[], ArrayList<ArrayList<Integer>> adj, ArrayList<Integer> ans) {
        ans.add(node);

        vis[node] = true;

        for(Integer it: adj.get(node)) {
            if(vis[it] == false) {
                dfshelper(it, vis, adj, ans);
            }
        }
    }
    public static ArrayList<Integer> dfsOfGraph(int V, ArrayList<ArrayList<Integer>> adj)
    {
        ArrayList<Integer> ans = new ArrayList<>();

        boolean vis[] = new boolean[V+1];
        
        for(int i = 1;i<=V;i++) {
            if(!vis[i]) dfshelper(i, vis, adj, ans);
        }

        return ans;
    }
}

Q-3 :- Number of Islands
class Solution {
    private int[][] dirs={{-1,0},{1,0},{0,-1},{0,1}};
    public int numIslands(char[][] arr) {
        boolean [][] visited=new boolean[arr.length][arr[0].length];
        int count=0;
        for(int i=0;i<arr.length;i++){
            for(int j =0;j<arr[i].length;j++){
                if(arr[i][j]=='1' && visited[i][j]==false){
                    dfs(arr,i,j,visited);
                    count++;
                }
            }
        }
        return count;
    }
    
    private void dfs(char [][]arr,int i,int j,boolean[][] visited){
        if(i<0 || j<0|| i>=arr.length ||j>=arr[i].length ||arr[i][j]=='0' || visited[i][j]==true ){
            return;
        }
       
        visited[i][j]=true;
        
        for(int[] dir:dirs){
            dfs(arr,i+dir[0],j+dir[1],visited);
        }

   }
}

Q-4 :- Flood Fill
class Solution {
    public int[][] floodFill(int[][] image, int sr, int sc, int newColor) {
        if (image[sr][sc] == newColor) return image;
        fill(image, sr, sc, image[sr][sc], newColor);
        return image;
    }
    
    private void fill(int[][] image, int sr, int sc, int color, int newColor) {
        if (sr < 0 || sr >= image.length || sc < 0 || sc >= image[0].length || image[sr][sc] != color) return;
        image[sr][sc] = newColor;
        fill(image, sr + 1, sc, color, newColor);
        fill(image, sr - 1, sc, color, newColor);
        fill(image, sr, sc + 1, color, newColor);
        fill(image, sr, sc - 1, color, newColor);
    }
}

Q-5 :- rate in a maze
class Solution {
    int di[] = {+1,0,0,-1};
    int dj[] = {0,-1,1,0};
    private static void solve(int i, int j, int a[][], int n, ArrayList<String> ans, String move,int vis[][]) {
        if (i == n - 1 && j == n - 1) {
            ans.add(move);
            return;
        }
        String dir = "DLRU";
        for (int ind = 0; ind < 4; ind++) {
            int nexti = i + di[ind];
            int nextj = j + dj[ind];
            if (nexti >= 0 && nextj >= 0 && nexti < n && nextj < n && vis[nexti][nextj] == 0 && a[nexti][nextj] == 1) {

                vis[i][j] = 1;
                solve(nexti, nextj, a, n, ans, move + dir.charAt(ind), vis);
                vis[i][j] = 0;

            }
        }
    }
    public static ArrayList < String > findPath(int[][] m, int n) {
        int vis[][] = new int[n][n];
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                vis[i][j] = 0;
            }
        }

        ArrayList<String> ans = new ArrayList<>();
        if (m[0][0] == 1) solve(0, 0, m, n, ans, "", vis, di, dj);
        return ans;
    }
}

Q-6 :- Detect Cycle in Undirected Graph
class Solution {
    public boolean checkForCycle(int node, int parent, boolean vis[], ArrayList <ArrayList<Integer>> adj) {
        vis[node] = true;
        for (Integer it: adj.get(node)) {
            if (vis[it] == false) {
                if (checkForCycle(it, node, vis, adj) == true)
                    return true;
            } else if (it != parent)
                return true;
        }

        return false;
    }
    
    public boolean isCycle(int V, ArrayList <ArrayList<Integer>> adj) {
        boolean vis[] = new boolean[V];

        for (int i = 0; i < V; i++) {
            if (vis[i] == false) {
                if (checkForCycle(i, -1, vis, adj))
                    return true;
            }
        }

        return false;
    }
}

Q-7 :- Detect Cycle in Directed Graph
class Solution{    
    private static boolean checkCyclehelper(int node,  ArrayList<ArrayList<Integer>> adj, int vis[], int dfsVis[]) {
        vis[node] = 1;
        dfsVis[node] = 1;
       
        for(Integer neighbor: adj.get(node)) {
        	if(vis[neighbor] == 0) {
                    if(checkCyclehelper(neighbor, adj, vis, dfsVis) == true) {
                	return true;
            	    }
        	} else if(dfsVis[neighbor] == 1) {
            	    return true;
        	}
        }
        dfsVis[node] = 0;
        return false;
    }
        	
    public static boolean isCyclic(int N, ArrayList<ArrayList<Integer>> adj) {
        int vis[] = new int[N];
        int dfsVis[] = new int[N];
       
        for(int i = 0;i<N;i++) {
        	if(vis[i] == 0) {
                    if(checkCyclehelper(i, adj, vis, dfsVis) == true) return true;
        	}
        }
        return false;
    }
}
