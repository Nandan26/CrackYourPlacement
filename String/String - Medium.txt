Q-6 :- Integer to Roman
class Solution {
    public String intToRoman(int num) {
        int[] values = {1000,900,500,400,100,90,50,40,10,9,5,4,1};
        String[] strs = {"M","CM","D","CD","C","XC","L","XL","X","IX","V","IV","I"};

        StringBuilder sb = new StringBuilder();

        for(int i=0;i<values.length;i++) {
            while(num >= values[i]) {
                num -= values[i];
                sb.append(strs[i]);
            }
        }
        return sb.toString();
    }
}

Q-7 :- Generate Parentheses
class Solution {
    public List<String> generateParenthesis(int n) {
        List<String> ans = new ArrayList<String>();
        helper(ans, "", n, n);
        return ans;
    }
    
    private void helper(List<String> ans, String str, int open, int close){
        
        if(open==0 && close==0){
            ans.add(str);
            return;
        }
        
        if(open > 0)
            helper(ans,str+"(", open-1, close);
        if(close > open)
            helper(ans, str+")", open, close-1);
    }
}

Q-8 :- Simplify paths
class Solution {
    public String simplifyPath(String path) {
        StringBuilder sb = new StringBuilder();
        Stack<String> st = new Stack<>();
        String[] paths = path.split("/");
        for (String s : paths) {
            if (s.equals("..")) {
                if (!st.isEmpty())
                    st.pop();
            }
            else if(s.equals(".") || s.equals("")) continue;
            else st.push(s);
        }
        if (st.isEmpty()) sb.append("/");
        while (!st.isEmpty()) {
            sb.insert(0, st.pop());
            sb.insert(0,"/");
        }

        return sb.toString();
    }
}

Q-9 :- Smallest window in a string containing all the characters of another string 
class Solution {
    public String minWindow(String s, String t) {
        String ans = "";
        if(t.length()>s.length()) return ans;
        if(s.equals(t)) return s;
		Map<Character, Integer> map = new HashMap<>();
		for (char ch : t.toCharArray()) {
			map.put(ch, map.getOrDefault(ch, 0) + 1);
		}
		int size = map.size();
		
		int i = 0;
		int j = 0;
		while (j < s.length()) {
			if (map.containsKey(s.charAt(j))) {
				char ch = s.charAt(j);
				map.put(ch, map.get(ch) - 1);
				if (map.get(ch) == 0) {
					size--;
				}
			}
           		j++;
			if (size == 0) {
				while(size ==0  && i < j) {
					String temp = s.substring(i, j);
					if (ans == "" || temp.length() < ans.length()) {
						ans = temp;
					}
					if (map.containsKey(s.charAt(i))) {
						map.put(s.charAt(i), map.get(s.charAt(i)) + 1);
						if ( map.get(s.charAt(i)) > 0) {
							size++;
						}
					}
					i++;
				}
			}
            
		}
		return ans;
	}
}

Q-10 :- Revrse word in string
class Solution 
{
	public String reverseWords(String s)
	{
		int left = 0;
		int right = s.length() - 1;

		String temp = "";
		String ans = "";

		while (left <= right)
		{
			char ch = s.charAt(left);
			if (ch != ' ')
			{
				temp += ch;
			}
			else if (ch == ' ')
			{
				if (!ans.equals(""))
				{
					ans = temp + " " + ans;
				}
				else
				{
					ans = temp;
				}
				temp = "";
			}
			left++;
		}
		if (!temp.equals(""))
		{
			if (!ans.equals(""))
			{
				ans = temp + " " + ans;
			}
			else
			{
				ans = temp;
			}
		}

		return ans;
	}
}

Q-11 :- Robin karp Algorithm
class Solution
{
    public int search(String pat, String txt, int q)
    {
        int M = pat.length();
        int N = txt.length();
        int i, j;
        int hpat = 0;
        int htxt = 0; 
        int h = 1;
	int tot=256;

        for (i = 0; i < M-1; i++)
            h = (h*tot)%q;

        for (i = 0; i < M; i++)
        {
            hpat = (tot*hpat + pat.charAt(i))%q;
            htxt = (tot*htxt + txt.charAt(i))%q;
        }

        for (i = 0; i <= N - M; i++)
        {


            if ( hpat == htxt )
            {

                for (j = 0; j < M; j++)
                {
                    if (txt.charAt(i+j) != pat.charAt(j))
                        break;
                }

                if (j == M)
                    return i;
            }

            if ( i < N-M )
            {
                htxt = (tot*(htxt - txt.charAt(i)*h) + txt.charAt(i+M))%q;
    
                if (htxt < 0)
                htxt = (htxt + q);
            }
        }
	return -1;
    }
}

Q-12 :- Group Anagrams
class Solution {
    public List<List<String>> groupAnagrams(String[] strs) {
        HashMap<HashMap<Character,Integer>,ArrayList<String>> moto=new HashMap<>();
        
        for(String str:strs){
            HashMap<Character, Integer> nano=new HashMap<>();
            
            for(int i=0;i<str.length();i++){
                char ch=str.charAt(i);
                nano.put(ch,nano.getOrDefault(ch,0)+1);
            }
            
            if(moto.containsKey(nano)==false){
                ArrayList<String> temp=new ArrayList<>();
                temp.add(str);
                moto.put(nano,temp);
            }
            else{
                ArrayList<String> t2=moto.get(nano);
                t2.add(str);
            }
            
        }
        
        List<List<String>> ans=new ArrayList<>();
        
        for(ArrayList<String> val:moto.values()){
            ans.add(val);
        }
        return ans;
    }
}

Q-13 :- Word Wrap
public class WordWrap
{
 
    final int MAX = Integer.MAX_VALUE;

    int printSolution (int p[], int n)
    {
        int k;
        if (p[n] == 1)
        	k = 1;
        else
        	k = printSolution (p, p[n]-1) + 1;
        System.out.println("Line" + " " + k + ": " +
                    "From word" +" "+ p[n] + " " + "to" + " " + n);
        return k;
    }
 

    void solveWordWrap (int l[], int n, int M)
    {
        int extras[][] = new int[n+1][n+1];

        int lc[][]= new int[n+1][n+1];

        int c[] = new int[n+1];
     
        int p[] =new int[n+1];
     

        for (int i = 1; i <= n; i++)
        {
            extras[i][i] = M - l[i-1];
            for (int j = i+1; j <= n; j++)
            extras[i][j] = extras[i][j-1] - l[j-1] - 1;
        }

        for (int i = 1; i <= n; i++)
        {
            for (int j = i; j <= n; j++)
            {
                if (extras[i][j] < 0)
                    lc[i][j] = MAX;
                else if (j == n && extras[i][j] >= 0)
                    lc[i][j] = 0;
                else
                    lc[i][j] = extras[i][j]*extras[i][j];
            }
        }

        c[0] = 0;
        for (int j = 1; j <= n; j++)
        {
            c[j] = MAX;
            for (int i = 1; i <= j; i++)
            {
                if (c[i-1] != MAX && lc[i][j] != MAX &&
                   (c[i-1] + lc[i][j] < c[j]))
                {
                    c[j] = c[i-1] + lc[i][j];
                    p[j] = i;
                }
            }
        }
     
        printSolution(p, n);
    }
}

Q-14 :- Basic calculater ||
class Solution {
    public int calculate(String s) {
        Stack<Integer> stack = new Stack<>();
        int len = s.length();
        int num = 0;
        char sign = '+';
        int ans= 0;
        for(int i = 0; i< len; i++) {
            char cnum= s.charAt(i);
            if(Character.isDigit(s.charAt(i))){
                    num = num * 10 + cnum - '0';
            }
            if(!Character.isDigit(cnum) && cnum != ' ' || i == len-1) {
                if(sign == '+') stack.push(num);
                if(sign == '-') stack.push(-num);
                if(sign == '*') stack.push(stack.pop() * num);
                if(sign == '/') stack.push(stack.pop() / num);
                sign = s.charAt(i);
                num = 0;
            }
        }
        for(int i : stack) {
                ans += i;
        }
        return ans;
    }
}