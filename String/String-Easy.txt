Q-1 :- Valid Parentheses

public class Solution {
    public boolean isValid(String s) {
        Stack<Character> st = new Stack<>();
        for(int i = 0; i < s.length(); i++) {
            char a = s.charAt(i);
            if(a == '(' || a == '[' || a == '{') st.push(a);
            
            else if(st.empty()) return false;
            
            else if(a == ')' && st.pop() != '(') return false;
            else if(a == ']' && st.pop() != '[') return false;
            else if(a == '}' && st.pop() != '{') return false;
        }
        
        return st.empty();
    }
}

Q-2 :- Print all the duplicates in Input String
public class Solution{

    private void findFreq(String str,int[] freq)
    {
        for (int i = 0; i < str.length(); i++)
            count[str.charAt(i)]++;
    }
 
    public void printDups(String str)
    {

        int freq[] = new int[256];
        findFreq(str, count);
 
        for (int i = 0; i < 256; i++)
            if (count[i] > 1)
                System.out.println((char)('a'+ i) + ", count = " + count[i]);
    }
}

Q-3 :- implement str-str
class Solution {
    public int strStr(String haystack, String needle) {
        int l1 = haystack.length(), l2 = needle.length();
        if (l1 < l2) {
            return -1;
        } else if (l2 == 0) {
            return 0;
        }
        for (int i = 0; i <= l1-l2; ++i) {
            if (haystack.substring(i,i+l2).equals(needle)) {
                return i;
            }
        }
        return -1;   
    }
}

Q-4 :- Longest common prefix
class Solution {
    public String longestCommonPrefix(String[] strs) {
        if (strs == null || strs.length == 0)
            return "";
        
        Arrays.sort(strs);
        String first = strs[0];
        String last = strs[strs.length - 1];
        int cnt = 0;
        while(cnt < first.length())
        {
            if (first.charAt(cnt) == last.charAt(cnt))
                cnt++;
            else
                break;
        }
        return cnt == 0 ? "" : first.substring(0, cnt);
    }
}

Q-5 :- Valid Palindrome
class Solution {
    public boolean validPalindrome(String s) {
        return palindromeHelper(s,0,s.length()-1,false);
    }
    
    private boolean palindromeHelper(String s,int left, int right,boolean change) {
          if (left >= right) {
            return true;
          }

          if (s.charAt(left) != s.charAt(right)) {
                if (change == false) {
                    if (palindromeHelper(s,left + 1, right,true)) return true;
                    return palindromeHelper(s,left, right - 1,true);
                } 
                else {
                    return false;
                }
          }

          return palindromeHelper(s,left + 1, right - 1,change);
    }
}