Q-1 :- Minimum Moves to Equal Array Elements
class Solution {
    public int minMoves(int[] nums) {
        int minimum = nums[0];
        for (int i = 1; i < nums.length; ++i) {
            if (nums[i] < minimum) {
                minimum = nums[i];
            }
        }

        int ans = 0;
        for (int i = 0; i < nums.length; ++i) {
            ans += nums[i] - minimum;
        }

        return ans;
    }
}

Q-2 :- Add Binary
public class Solution {
    public String addBinary(String a, String b) {
        StringBuilder sb = new StringBuilder();
        int i = a.length() - 1, j = b.length() -1;
        int prevcarry = 0;
        while (i >= 0 || j >= 0) {
            int sum = prevcarry;
            if (i >= 0) sum += a.charAt(i--) - '0';
            if (j >= 0) sum += b.charAt(j--) - '0';
            
            sb.append(sum % 2);
            
            prevcarry = sum / 2;
        }
        if (prevcarry != 0) sb.append(prevcarry);
        
        return sb.reverse().toString();
    }
}

Q-3 :- Max Product of three numbers
class Solution {
    public int maximumProduct(int[] nums) {
        int max1, max2, max3, min1, min2;
        max1 = max2 = max3 = Integer.MIN_VALUE;
        min1 = min2 = Integer.MAX_VALUE;
        for (int n : nums) {
            if(max1 < n){
                max3 = max2;
                max2 = max1;
                max1 = n;
            }else if(max2 < n){
                max3 = max2;
                max2 = n;
            }else if(max3 < n){
                max3 = n;
            }

            if (n < min1) {
                min2 = min1;
                min1 = n;
            } else if (n < min2) {
                min2 = n;
            }
        }
        return Math.max(max1*max2*max3, max1*min1*min2);
    }
}

Q-4 :- Excel Sheet Column Title
class Solution {
    public String convertToTitle(int columnNumber) {
        String ans = "";
        while(columnNumber != 0) {
            char ch = (char)((columnNumber - 1) % 26 + 65);
            columnNumber = (columnNumber - 1) / 26;
            ans = ch + ans;
        }
        return ans;
    }
}

Q-5 :- Happy Number
class Solution {
    public boolean isHappy(int n) {
        HashSet<Integer> ans=new HashSet<>();
        int index=0;
        int val=0;
        while(true){
            val=0;
            while(n!=0){
                index=n%10;
                val+=index*index;
                n=n/10;
            }
                
            if(val==1){
                return true;
            }
            if(ans.contains(val)){
                return false;
            }
            n=val;
            ans.add(n);               
        }   
    }
}

Q-6 :- Palindrome number
class Solution {
    public boolean isPalindrome(int x) {
        if(x<0 || (x!=0 && x%10==0))
            return false;
        int res = 0;
        while(x>res){
            res = res*10 + x%10;
            x = x/10;
        }
        return (x==res || x==res/10);
    }
}

Q-7 :- Missing number
class Solution {
    private void swap(int arr[],int i,int j){
        int temp=arr[i];
        arr[i]=arr[j];
        arr[j]=temp;
    }
    public int missingNumber(int[] nums) {
        int i=0;
        int ans=0;
        while(i<nums.length){
            int correct=nums[i];
            if(nums[i]<nums.length && nums[i]!=nums[correct]){
                swap(nums,i,correct);
            }
            else i++;
        }
        
        for(i=0;i<nums.length;i++){
            if(nums[i]!=i){
                return i;
            }

        }
        return nums.length;
    }
}

Q-8 :- Reverse Integer
class Solution {
    public int reverse(int x) {
        long reverse = 0;
		while(x != 0){
			reverse = reverse*10 + x%10;
			x /= 10;
		}
		if(reverse >= Integer.MIN_VALUE && reverse <= Integer.MAX_VALUE)
			return (int) reverse;
		else
			return 0;
    }
}

Q-9 :- Power of two
class Solution {
    public boolean isPowerOfTwo(int n) {

        return n>0 && (n & (n-1)) == 0;
    }
}

