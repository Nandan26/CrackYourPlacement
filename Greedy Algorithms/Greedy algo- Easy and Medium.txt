Q-1 :- Gas Station
class Solution {
    public int canCompleteCircuit(int[] gas, int[] cost) {
        int cur_gas=0;
	    int ans=0,total_gas=0,total_cost=0;
	    for(int i:gas) total_gas+=i;
        for(int i:cost) total_cost+=i;
        if(total_gas<total_cost) return -1;
        for(int i=0;i<gas.length;i++){
	        cur_gas+=gas[i]-cost[i];
	        if(cur_gas < 0){
	            ans=i+1; //start again
	            cur_gas=0;
	        }
         }
         return ans;
    }
}

Q-2 :- Minimum cost for acquiring all coins with k extra coins allowed with every coin
class Solution {

    public int minCost(int []coin, int n, int k)
    {
        Arrays.sort(coin);

        for (int i = 1; i <= n - 1; i++)
            coin[i] += coin[i - 1]; 

        int coins_needed =(int) Math.ceil(1.0 * n / (k + 1));

        return coin[coins_needed - 1];
    }
}

Q-3 :- Restore the array from adjacent pairs
class Solution {
    public int[] restoreArray(int[][] adjacentPairs) {
        int[] res=  new int[adjacentPairs.length + 1];
        Map<Integer,List<Integer>> graph = new HashMap<>();
        
        for(int[] pairs : adjacentPairs){
            List<Integer> list = graph.getOrDefault(pairs[0],new ArrayList<>());
            list.add(pairs[1]);
            graph.put(pairs[0],list);
            
            list = graph.getOrDefault(pairs[1],new ArrayList<>());
            list.add(pairs[0]);
            graph.put(pairs[1],list);
        }
        
        Stack<Integer> stack = new Stack<>();
        Set<Integer> vis = new HashSet<>();
        
        for(Map.Entry<Integer,List<Integer>> entry: graph.entrySet()){
            if( entry.getValue().size() == 1 ){
                stack.push(entry.getKey());
                break;
            }
        }
        
        int i = 0;
        while(!stack.isEmpty()){
            int curr = stack.pop();
            res[i++] = curr;
            vis.add(curr);
            for(int neighbours : graph.get(curr)){
                if(!vis.contains(neighbours)){
                    stack.push(neighbours);
                }
            }
        }
        
        return res;
    }
}

Q-4 :- Task Schedular
class Solution {
    public int leastInterval(char[] tasks, int n) {
        if(n==0) {
            return tasks.length;
        }
        int[] freq = new int[26];
        for(char ch:tasks) {
            freq[ch-'A']+=1;
        }
        PriorityQueue<Integer> maxHeap = new PriorityQueue<>((i1,i2)->i2-i1);
        for(int i=0;i<26;i++) {
            if(freq[i]!=0) {
                maxHeap.add(freq[i]);
            }
        }
        
        int total=0;
        
        while(!maxHeap.isEmpty()) {
            
            int time=0;
            
            List<Integer> list = new ArrayList<>();
            
            
            for(int i=0;i<=n;i++) {
                 
                 if(!maxHeap.isEmpty()) {
                     
                     list.add(maxHeap.poll()-1);
                     
                     time++;
                 }
            }
            
            for(int item:list) {
                if(item!=0)
                    maxHeap.add(item);
            }
            
            total+=maxHeap.isEmpty()?time:n+1;
        }
        
        return total;
    }
}

Q-5 :- Minimum Deletions to Make Character Frequencies Unique
class Solution {
    public int minDeletions(String s) {
        int freq[] = new int[26];
        
        for (char ch : s.toCharArray()) {
            freq[ ch-'a']++; 
        }
        int ans = 0;
        Set<Integer> set = new HashSet<>();
        for (int i = 0; i < 26; i++) {
            while (freq[i]!=0 && set.contains(freq[i])) {
                ans++;
                freq[i]--;
            }
            set.add(freq[i]);
        }
        return ans;
    }
}

Q-6 :- Remove K Digits
class Solution {
    public String removeKdigits(String num, int k) {
        Stack<Character> st=new Stack<>();
        
        for(int i=0;i<num.length();i++){
            char ch=num.charAt(i);
            
            while(st.size()>0 && k>0 && st.peek()>ch){
                st.pop();
                k--;
            }
            st.push(ch);
        }
        
        while(k>0 && st.size()>0){
            
            st.pop();
            k--;
            
        }
        
        char[] ans=new char[st.size()];
        
        int h=ans.length-1;
        
        while(h>=0)ans[h--] =st.pop();
        int d=0;
        
        while(d<ans.length && ans[d]=='0') d++; //  000000-> 0
        StringBuilder sb=new StringBuilder();
        
        while(d<ans.length) sb.append(ans[d++]);
        if(sb.toString().isEmpty()==true) return "0";
        else return sb.toString();
    }
}

Q-7 :- CHOCOLA - Chocolate
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.*;
import java.io.BufferedReader;

public class CHOCOLA {
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        int t = Integer.parseInt(br.readLine());

        while (t-- > 0){
            br.readLine();
            String temp[] = br.readLine().split(" ");
            Integer N = Integer.parseInt(temp[0]);
            Integer M = Integer.parseInt(temp[1]);
            N--;M--;

            Integer[] hor = new Integer[N];
            Integer[] ver = new Integer[M];

            for (int i = 0; i < N  ; i++) {
               hor[i] =  Integer.parseInt(br.readLine());
            }
            for (int i = 0; i < M  ; i++) {
                ver[i] =  Integer.parseInt(br.readLine());
            }
            Arrays.sort(hor);
            Arrays.sort(ver);

            Integer cost = 0,vc =1,hc =1;
            for(int i = N-1,j = M-1;i >=0 || j>=0;){
                if(i < 0 ){
                    cost += (hc * ver[j]);
                    vc++;
                    j--;
                    continue;
                }
                if(j < 0){
                    cost += ( vc * hor[i]);
                    hc++;
                    i--;
                    continue;
                }
                if(hor[i] >= ver[j]){
                    cost += ( vc * hor[i]);
                    hc++;
                    i--;
                }else {
                    cost += (hc * ver[j]);
                    vc++;
                    j--;
                }
            }
            System.out.println(cost);
        }
    }
}

Q-8 :- Non-overlapping Intervals
class Solution {
	public int eraseOverlapIntervals(int[][] intervals) {
		if (intervals.length == 0) {
			return 0;
		}

		Arrays.sort(intervals, (a,b) -> (a[0] - b[0]));
		int cnt = 0;
		int range = intervals[0][1];

		for (int i = 1; i < intervals.length; i++) {
			if(range > intervals[i][0]) {
				range = Math.min(range, intervals[i][1]);
				cnt++;
			} else {
				range = intervals[i][1];
			}		
        }

		return cnt;
	}
}

Q-9 :- Minimum Time to Make Rope Colorful
class Solution {
    public int minCost(String s, int[] cost) {
       int min=0;
       for(int i=0;i<s.length()-1;i++){
           if(s.charAt(i)==s.charAt(i+1)){
               min=min+Math.min(cost[i],cost[i+1]);
               cost[i+1]=Math.max(cost[i],cost[i+1]);
           }
       }
       return min;
    }
}

Q-10 :- Minimum sum of two numbers formed from digits of an array
class Solution{

    public int minSum(int a[], int n)
    {
        Arrays.sort(a);
        int num1 = 0;
        int num2 = 0;
        for (int i = 0; i < n; i++) {
            if (i % 2 == 0)
                num1 = num1 * 10 + a[i];
            else
                num2 = num2 * 10 + a[i];
        }
        return num2 + num1;
    }
}