Q-1 Find the duplicate number:-
class Solution {
    private void swap(int arr[],int i,int j){
        int temp=arr[i];
        arr[i]=arr[j];
        arr[j]=temp;
    }
    public int findDuplicate(int[] nums) {
        int i=0;
        int ans=0;
        while(i<nums.length){
            int correct=nums[i]-1;
            if(nums[i]!=nums[correct]){
                swap(nums,i,correct);
            }
            else i++;
        }
        
        for(i=0;i<nums.length;i++){
            if(nums[i]!=i+1){
                ans=nums[i];
            }

        }
        return ans;
    }
}

Q-2 :- Sort Colors
class Solution {
    public void sortColors(int[] a) {
        int count0 = 0;
        int count1= 0;
        int count2= 0;
        for (int i=0;i<a.length;i++){
            if (a[i]==0) {
                count0++;
            }
            else if (a[i]==1){
                count1++;
            } 
            else count2++;
        }
        int i=0;
        while(count0!=0){
            a[i]=0;
            i++;
            count0--;
        }
        while(count1!=0){
            a[i]=1;
            i++;
            count1--;
        }        
        while(count2!=0){
            a[i]=2;
            i++;
            count2--;
        }
        
    }
}

Q-3:- Remove Duplicates from sorted array
class Solution {
    public int removeDuplicates(int[] nums) {
        int k = 0;
        int i = 0;
        while(i<nums.length) {
            int curr = nums[i];
            while(i<nums.length && curr==nums[i]) {
                i++;
            }
            nums[k++] = curr;
        }
        return k;
    }        
    
}

Q-4 :- Set Matrix to Zeros
class Solution {
    public void setZeroes(int[][] matrix) {
        int firstrow=-1;
        int firstcol=-1;
        
        int m=matrix.length;
        int n=matrix[0].length;
        
        for(int i=0;i<m;i++){
            if(matrix[i][0]==0){
                firstrow=0;
            }
        }
        for(int i=0;i<n;i++){
            if(matrix[0][i]==0){
                firstcol=0;
            }
        }
        
        for(int i=1;i<m;i++){
            for(int j=1;j<n;j++){
                if(matrix[i][j]==0){
                    matrix[i][0]=0;
                    matrix[0][j]=0;
                }
            }
        }
        for(int i=1;i<m;i++){
            for(int j=1;j<n;j++){
                if(matrix[0][j]==0 || matrix[i][0]==0){
                    matrix[i][j]=0;
                }
            }
        }
        for(int i=0;i<m;i++){
            if(firstrow==0){
                matrix[i][0]=0;
            }
        }
        for(int i=0;i<n;i++){
            if(firstcol==0){
                matrix[0][i]=0;
            }
        }
        
    }
}

Q-5 :- Move Zeros
class Solution {
    public void moveZeroes(int[] nums) {
        int j=-1;
        for(int i=0;i<nums.length;i++){
            if(nums[i]!=0){
                j++;
                int temp=nums[i];
                nums[i]=nums[j];
                nums[j]=temp;
                
            }
        }
    }
}

Q-6:- Best Time to buy and sell stock
class Solution {
    public int maxProfit(int[] prices) {
        int minimum = prices[0];
        int profit = 0;
        for (int i = 0; i < prices.length; i++) {
            minimum = Math.min(minimum, prices[i]);
            profit = Math.max(profit, prices[i] - minimum); 
        }
        return profit;
    }
}

Q-7 :- Chocolate Distribution Problem
class Solution
{
    public long findMinDiff (ArrayList<Long> a, long n, long m)
    {
        if(n==0 || m==0) return 0;
        Long min = Long.MAX_VALUE;
       
        Collections.sort(a);
       
        int i = 0;
        int j = (int) m - 1;
        Long curr_diff = a.get(j) - a.get(i);
        if(curr_diff < min ) 
            min = curr_diff;
       
        while(j<a.size()){
           curr_diff = a.get(j) - a.get(i);
           if(curr_diff < min ){
             min = curr_diff;  
           } 
           i++;
           j++;
        }
        return min; 
   }
}

Q-8 :- Two Sum
class Solution {
    public int[] twoSum(int[] nums, int target) {
        HashMap<Integer,Integer> h=new HashMap();
        int ans[]=new int[2];
        for(int i=0;i<nums.length;i++){
            
            if(h.containsKey(target-nums[i])){
                ans[0]=i;
                ans[1]=h.get(target-nums[i]);
            }
            h.put(nums[i],i);
        }
        return ans;
    }
}

Q-9 :- Best Time to buy and Sell Stock ||
class Solution {
    public int maxProfit(int[] prices) {
        int bd=0;
        int sd=0,profit=0;
        for(int i=1;i<prices.length;i++){
            if(prices[i]>=prices[i-1]) sd++;
            else{
                profit+=prices[sd]-prices[bd];
                bd=sd=i;
            }
        }
        profit+=prices[sd]-prices[bd];
        return profit;
        
    }
}

