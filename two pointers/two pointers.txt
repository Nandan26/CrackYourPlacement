Q-1 :- Sort Colors
class Solution {
    public void sortColors(int[] a) {
        int count0 = 0;
        int count1= 0;
        int count2= 0;
        for (int i=0;i<a.length;i++){
            if (a[i]==0) {
                count0++;
            }
            else if (a[i]==1){
                count1++;
            } 
            else count2++;
        }
        int i=0;
        while(count0!=0){
            a[i]=0;
            i++;
            count0--;
        }
        while(count1!=0){
            a[i]=1;
            i++;
            count1--;
        }        
        while(count2!=0){
            a[i]=2;
            i++;
            count2--;
        }
        
    }
}

Q-2 :- Longest Repeating Character Replacement
class Solution {
    public int characterReplacement(String s, int k) {
        int[] freq = new int[26];
        int start = 0;
        int end = 0;
        int maxfreq = 0;
        int ans = 0; 
        for(end = 0; end<s.length(); end++){ 
            char ch = s.charAt(end);              
            freq[ch-'A']++;
            maxfreq = Math.max(maxfreq, freq[ch-'A']);
           
            int otherchar = (end - start + 1) - maxfreq;
            
            if(otherchar<=k){             
                ans = Math.max(ans, end - start + 1);    
            }
            else {       
                freq[s.charAt(start++)-'A']--;    
            }
        }
        
        return ans;
    }
}

Q-3 :- Maximum Number of Visible Points
class Solution { 
    List<Double> angles;
    double angle;
    double diff;
    int ans;
    int pointsAtLocation;
    
    private double getAngle(List<Integer> point, List<Integer> location) {
        double angle = Math.toDegrees(Math.atan2(point.get(0) - location.get(0), point.get(1) - location.get(1)));

        angle += angle < 0 ? 360 : 0;
        return angle;
    }

    private double getDiff(int start, int end) {
        diff = angles.get(end) - angles.get(start);
        if(diff < 0) diff += 360.0;
        return diff;
    }

    private void initialize() {
        angles = new ArrayList<>();
        int ans = 0;
        int pointsAtLocation = 0;
    }

    public int visiblePoints(List<List<Integer>> points, int angle, List<Integer> location) {
        initialize();
        
        for(List<Integer> point : points) {

            if(point.get(0) == location.get(0) && point.get(1) == location.get(1))
                pointsAtLocation++;
            else
                angles.add(getAngle(point, location));
        }

        Collections.sort(angles);
        int n = angles.size();

        for(int end = 0, start = 0; start < n; end++) {

            if(ans == n) return ans + pointsAtLocation;

            while(start < angles.size() && getDiff(start, end % n) > angle) {
                start++;
            }
            ans = Math.max(ans, end - start + 1);
        }
        
        return ans + pointsAtLocation;
    }
}
