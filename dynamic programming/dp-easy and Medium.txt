Q-1 :- Climbing Stairs
class Solution {
    

    public int climbStairs(int n) {
        int[] ans=new int[n+1];
        ans[0]=1;
        ans[1]=1;
        
        
        for(int i=2;i<n+1;i++){
            ans[i]=ans[i-1]+ans[i-2];
        }
            
        return ans[n];
    }

}

Q-2 :- Maximum Product Subarray
class Solution {
    public int maxProduct(int[] nums) {
        int ans=Integer.MIN_VALUE;
        int n=nums.length;
        int cprod=1;
        for(int i=0;i<n;i++){
            cprod*=nums[i];
            ans=Math.max(ans,cprod);
            if(cprod==0){
                cprod=1;
            }
        }
        cprod=1;
        for(int i=n-1;i>=0;i--){
            cprod*=nums[i];
            ans=Math.max(ans,cprod);
            if(cprod==0){
                cprod=1;
            }
        }
        return ans;
    }
}

Q-3 :- Ones and Zeros
class Solution {
    
    public int findMaxForm(String[] strs, int m, int n) {
        int[][] dp = new int[m + 1][n + 1];
        
        for(String str : strs){
            //count of onees and zeors for this string
            int[]count = getCount(str);
            
            for(int zeroes = m; zeroes >= count[0]; zeroes--){
                for(int ones = n; ones >= count[1]; ones--){
                    
                    dp[zeroes][ones] = Math.max(dp[zeroes][ones], 1 + dp[zeroes - count[0]][ones - count[1]]);
                }  
            }
        }
        
        return dp[m][n];
    }
}

Q-4 :- Counting Bits
class Solution {
    public int[] countBits(int n) {
        if(n==0) return new int[1];
        int[] ans=new int[n+1];
        ans[0]=0;
        ans[1]=1;
        for(int i=2;i<=n;i++){
            if(i % 2 == 0)
                ans[i] = ans[i/2];
            else
                ans[i] = ans[i/2] + 1;
        }
        
        return ans;
    }
}

Q-5 :- Knight dialer
class Solution {
    int mod = 1_000_000_007;
    public int knightDialer(int n) {
        if(n == 1) return 10;
        long[][] dp = new long[n][10];
        for(int i = 0; i < 10; i++)
            dp[0][i] = 1;
        for(int i = 1; i < n; i++)
            for(int j = 0; j < 10; j++)
                helper(dp, i, j);
        
        long ans = 0;
        for(int j = 0; j < 10; j++)
        {
            ans += dp[n-1][j];
            ans %= mod;
        }
        return (int)ans;
    }
    
    private void helper(long[][] dp, int i, int j)
    {
        if(j == 1)
            dp[i][j] = (dp[i-1][6] + dp[i-1][8]) % mod;
        else if(j == 2)
            dp[i][j] = (dp[i-1][7] + dp[i-1][9]) % mod;
        else if(j == 3)
            dp[i][j] = (dp[i-1][4] + dp[i-1][8]) % mod;
        else if(j == 4)
            dp[i][j] = (dp[i-1][3] + dp[i-1][9] + dp[i-1][0]) % mod;
        else if(j == 6)
            dp[i][j] = (dp[i-1][1] + dp[i-1][7] + dp[i-1][0]) % mod;
        else if(j == 7)
            dp[i][j] = (dp[i-1][6] + dp[i-1][2]) % mod;
        else if(j == 8)
            dp[i][j] = (dp[i-1][1] + dp[i-1][3]) % mod;
        else if(j == 9)
            dp[i][j] = (dp[i-1][4] + dp[i-1][2]) % mod;
        else if(j == 0)
            dp[i][j] = (dp[i-1][4] + dp[i-1][6]) % mod;
    }
}

Q-6 :- Maximize the cut segments
class Solution
{
    //Function to find the maximum number of cuts.
    public int maximizeCuts(int l, int p, int q, int r)
    {
        //Your code here
        int dp[] = new int[l + 1];

        for (int i = 0; i < l + 1; i++)
            dp[i] = -1;

        dp[0] = 0;
 
        for (int i = 0; i <= l; i++) {
 
            if (dp[i] == -1)
                continue;
 
            if (i + p <= l)
                dp[i + p] = Math.max(dp[i + p], dp[i] + 1);
 
  
            if (i + q <= l)
                dp[i + q] = Math.max(dp[i + q], dp[i] + 1);
 

            if (i + r <= l)
                dp[i + r] = Math.max(dp[i + r], dp[i] + 1);
        }
 
        if (dp[l] == -1) {
            dp[l] = 0;
        }

        return dp[l];
    }
}

Q-7 :- Unique Paths
class Solution {
    public int uniquePaths(int m, int n) {
        int[][] dp=new int[m][n];
        for(int i=m-1;i>=0;i--){
            for(int j=n-1;j>=0;j--){
                if(i==m-1 && j==n-1){
                    dp[i][j]=1;
                }
                else if(i==m-1){
                    dp[i][j]=dp[i][j+1];
                }
                else if(j==n-1){
                    dp[i][j]=dp[i+1][j];
                }
                else dp[i][j]=dp[i][j+1]+dp[i+1][j];
            }
        }
        return dp[0][0];
    }
}

Q-8 :- Minimum Path Sum
class Solution {
    public int minPathSum(int[][] grid) {
        int n=grid.length;
        int m=grid[0].length;
        int[][] dp=new int[n][m];
        
        for(int i=n-1;i>=0;i--){
            for(int j=m-1;j>=0;j--){
                if(i==n-1 && j==m-1){
                    dp[i][j]=grid[i][j];
                }
                else if(i==n-1){
                    dp[i][j]=dp[i][j+1] + grid[i][j];
                }
                else if(j==m-1){
                    dp[i][j]=dp[i+1][j] + grid[i][j];
                }
                else{
                    dp[i][j]=Math.min(dp[i][j+1],dp[i+1][j])+grid[i][j];
                }
            }
        }
        return dp[0][0];
    }
}

Q-9 :- Coin change
class Solution {
	public int coinChange(int[] coins, int amount) {
        int[] dp=new int[amount+1];
        Arrays.fill(dp,amount+1);
        dp[0]=0;
        for(int i=1;i<=amount;i++)
            for(int c:coins)
                if(i>=c) dp[i]=Math.min(dp[i],dp[i-c]+1);
        return dp[amount]>amount?-1:dp[amount];
    }
}

Q-10 :- Decode Ways
class Solution {
    public int numDecodings(String s) {
        if (s.length() == 0) {
            return 0;
        }
        int n = s.length();
        int[] dp = new int[n + 1];
        dp[0] = 1;
        
        //to decode the first character
        if(s.charAt(0)=='0') return 0;
        dp[1] = 1;
        for (int i = 2; i <= n; i++) {
            int singledigit = Integer.valueOf(s.substring(i - 1, i));
            int doubledigit = Integer.valueOf(s.substring(i - 2, i));
            if (singledigit >= 1 && singledigit <= 9) {
               dp[i] += dp[i-1];  
            }
            if (doubledigit >= 10 && doubledigit <= 26) {
                dp[i] += dp[i-2];
            }
        }
        return dp[n];
    }
}

Q-11 :- Max length of repeated subarray
class Solution {
    public int findLength(int[] nums1, int[] nums2) {

        int m = nums1.length;
        int n = nums2.length;
        int max = 0;

        int[][] dp = new int[m + 1][n + 1];
        for(int i = 0;i <= m;i++){
            for(int j = 0;j <= n;j++){
                if(i == 0 || j == 0){
                    dp[i][j] = 0;
                }
                else{
                    if(nums1[i - 1] == nums2[j - 1]){
                        dp[i][j] = 1 + dp[i - 1][j - 1];
                        max = Math.max(max,dp[i][j]);
                    }
                }
            }
        }
        return max;
    }
}

Q-12 :- Longest Increasing Subsequence
class Solution {
    public int lengthOfLIS(int[] nums) {
        int n=nums.length;
        int[] dp=new int[n];
        int max=Integer.MIN_VALUE;
        for(int i=0;i<n;i++){
            dp[i]=1;
            for(int j=0;j<i;j++){
                
                if(nums[i]>nums[j]){
                    dp[i]=Math.max(dp[i],dp[j]+1);
                    
                }
            }
        }
        for(int ans:dp){
            max=Math.max(max,ans);
        }
        return max;
    }
}

Q-13 :- Longest Common Substring
class Solution{
    public int String LCS(String X, String Y, int m, int n)
    {
        int maxlen = 0;
        int endingIndex = m;
        int[][] dp = new int[m + 1][n + 1];
 
        for (int i = 1; i <= m; i++)
        {
            for (int j = 1; j <= n; j++)
            {
                if (X.charAt(i - 1) == Y.charAt(j - 1))
                {
                    dp[i][j] = dp[i - 1][j - 1] + 1;

                    if (dp[i][j] > maxlen)
                    {
                        maxlen = dp[i][j];
                    }
                }
            }
        }
 
        return maxlen;
    }
}

Q-14 :- Count Square Submatrices with All Ones
class Solution {
    public int countSquares(int[][] arr) {
        int[][] dp =new int[arr.length][arr[0].length];
        int sum =0;
        for(int i=0;i<arr.length;i++){
            for(int j=0;j<arr[0].length;j++){
                if(arr[i][j]==0){
                    dp[i][j]=0;
                }
                else if(i==0 || j==0){
                    dp[i][j]=1;
                    sum+=dp[i][j];
                }
                else{
                    int min= Math.min(dp[i-1][j],Math.min(dp[i-1][j-1],dp[i][j-1]));
                    dp[i][j]=min+1;
                    sum+=dp[i][j];
                }
            }
        }
        return sum;
    }
}

Q-15 :- Count Square Submatrices with All ones
class Solution {
    public int countSquares(int[][] arr) {
        int[][] dp =new int[arr.length][arr[0].length];
        int sum =0;
        for(int i=0;i<arr.length;i++){
            for(int j=0;j<arr[0].length;j++){
                if(arr[i][j]==0){
                    dp[i][j]=0;
                }
                else if(i==0 || j==0){
                    dp[i][j]=1;
                    sum+=dp[i][j];
                }
                else{
                    int min= Math.min(dp[i-1][j],Math.min(dp[i-1][j-1],dp[i][j-1]));
                    dp[i][j]=min+1;
                    sum+=dp[i][j];
                }
            }
        }
        return sum;
    }
}

Q-16 :- Maximal Square
class Solution {
    public int maximalSquare(char[][] matrix) {
        int[][] dp=new int[matrix.length][matrix[0].length];
        int max=0;
        for(int i=matrix.length-1;i>=0;i--){
            for(int j=matrix[0].length-1;j>=0;j--){
                if(matrix[i][j]=='1'){
                    if(i==matrix.length-1 || j==matrix[0].length-1){
                        dp[i][j]=1;
                    }

                    else dp[i][j]=Math.min(dp[i+1][j+1],Math.min(dp[i+1][j],dp[i][j+1]))+1;
                    max=Math.max(max,dp[i][j]);
                }
                
            }
            
        }
        
        return max*max;
    }
}

Q-17 :- mobile Numeric Keypad
class Solution
{

    public int getCount(char keypad[][], int n)
    {
        if(keypad == null || n <= 0)
            return 0;
        if(n == 1)
            return 10;

        int row[] = {0, 0, -1, 0, 1};
        int col[] = {0, -1, 0, 1, 0};

        int [][]count = new int[10][n + 1];
        int i = 0, j = 0, k = 0, move = 0, ro = 0, co = 0, num = 0;
        int nextNum = 0, totalCount = 0;

        for (i = 0; i <= 9; i++)
        {
            count[i][0] = 0;
            count[i][1] = 1;
        }
        for (k = 2; k <= n; k++)
        {
            for (i = 0; i < 4; i++)
            {
                for (j = 0; j < 3; j++)
                {

                    if (keypad[i][j] != '*' &&
                        keypad[i][j] != '#')
                    {

                        num = keypad[i][j] - '0';
                        count[num][k] = 0;
                        for (move = 0; move < 5; move++)
                        {
                            ro = i + row[move];
                            co = j + col[move];
                            if (ro >= 0 && ro <= 3 && co >= 0 &&
                                co <= 2 && keypad[ro][co] != '*' &&
                                           keypad[ro][co] != '#')
                            {
                                nextNum = keypad[ro][co] - '0';
                                count[num][k] += count[nextNum][k - 1];
                            }
                        }
                    }
                }
            }
        }
        totalCount = 0;
        for (i = 0; i <= 9; i++)
            totalCount += count[i][n];
        return totalCount;
    }
} 

Q-18 :- Weighted Job Scheduling
class Solution {
    class Job implements Comparable<Job>{
        int start;
        int end;
        int profit;
        Job(int start, int end, int profit) {
            this.start = start;
            this.end = end;
            this.profit = profit;
        }
        public int compareTo(Job otherJob) {
            return this.end - otherJob.end;
        }
    }
    public int jobScheduling(int[] startTime, int[] endTime, int[] profit) {
        int n=startTime.length;
        Job[] jobs = new Job[n];
        for (int i = 0; i<n; i++) {
            jobs[i] = new Job(startTime[i], endTime[i], profit[i]);
        }

        Arrays.sort(jobs);

        int[] dp = new int[n + 1];
        for (int i = 1; i<dp.length; i++) {
            int prev = find(jobs, i-1);
            int prevProfit = prev == -1? 0:dp[prev + 1];
            dp[i] = Math.max(prevProfit + jobs[i-1].profit, dp[i-1]);
        }
        return dp[n];
    }
    
    public int find(Job[] jobs, int index) {
        int low = 0;
        int high = jobs.length - 1;
        while (low + 1 < high) {
            int mid = (low + high)/2;
            if (jobs[mid].end > jobs[index].start) {
                high = mid;
            } else {
                low = mid;
            }
        }
        
        if (jobs[high].end <= jobs[index].start) {
            return high;
        } else if (jobs[low].end <= jobs[index].start) {
            return low;
        } else {
            return -1;
        }
    }
}

Q-19 :- Delete and Earn
class Solution {
    public int deleteAndEarn(int[] nums) {
        int n = 10001;
        int[] arr = new int[n]; 
        for(int num : nums){
            arr[num] += num;
        }
        
        int take = 0, skip = 0;
        for (int i = 0; i < n; i++) {
            int takei = skip + arr[i];
            int skipi = Math.max(skip, take);
            take = takei;
            skip = skipi;
        }
        return Math.max(take, skip);
    }
}

Q-20 :- Range Sum Query 2D - Immutable
class NumMatrix {
    int[][] prefixSum;
    public NumMatrix(int[][] matrix) {
        if(matrix == null || matrix.length == 0)
            return;
        int rows = matrix.length;
        int cols = matrix[0].length;
        prefixSum = new int[rows][cols];
        for(int i = 0; i < rows; i++) {
            for(int j = 0; j < cols; j++) {
                if(j == 0)
                    prefixSum[i][j] = matrix[i][j];
                else
                    prefixSum[i][j] = prefixSum[i][j - 1] + matrix[i][j];
            }
        }
        for(int i = 0; i < cols; i++) {
            for(int j = 0; j < rows; j++) {
                if(j == 0)
                    prefixSum[j][i] = prefixSum[j][i];
                else
                    prefixSum[j][i] = prefixSum[j - 1][i] + prefixSum[j][i];
            }
        }
    }
    
    public int sumRegion(int row1, int col1, int row2, int col2) {
        if(row1 == 0 && col1 == 0)
            return prefixSum[row2][col2];
        else if(row1 == 0)
            return prefixSum[row2][col2] - prefixSum[row2][col1 - 1];
        else if(col1 == 0)
            return prefixSum[row2][col2] - prefixSum[row1 - 1][col2];
        return prefixSum[row2][col2] - prefixSum[row1 - 1][col2] - prefixSum[row2][col1-1] + prefixSum[row1-1][col1-1];
    }
}
