Q-19 :- Binary Search Tree Iterator
class BSTIterator {
    private Stack<TreeNode> st=new Stack<>();
    public BSTIterator(TreeNode root) {
        pushNodes(root);
    }
    
    public int next() {
        TreeNode tempNode= st.pop();
        pushNodes(tempNode.right);
        return tempNode.val;
    }
    
    public boolean hasNext() {
        return !st.isEmpty();
    }
    private void pushNodes(TreeNode root){
        for(; root!=null; st.push(root), root=root.left);
    }
}

Q-20 :- Lowest Common ancestor in Binary Tree
class Solution {
public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {
        List<TreeNode> lst1 = new ArrayList<>();
        path(root, p, lst1);

        List<TreeNode> lst2 = new ArrayList<>();
        path(root, q, lst2);

        for(int i=0; i < lst1.size(); i++){
            for(int j=0; j<lst2.size(); j++){
                if(lst1.get(i) == lst2.get(j)){
                    return lst1.get(i);
                } 
            }

        }

        return null;
    }

    public boolean path(TreeNode node, TreeNode target, List<TreeNode> lst){
        if(node == null) {
            return false;
        }
        if(node == target) {
            lst.add(node);
            return true;
        }

        boolean flc = path(node.left, target, lst);
        if(flc == true) {
            lst.add(node);
            return true;
        }

        boolean frc = path(node.right, target, lst);
        if(frc == true) {
            lst.add(node);
            return true;
        }

        return false;
    }
}

Q-21 :- Unique BST ||
class Solution {
    public List<TreeNode> generateTrees(int n) {
        return helper(1, n);
    }
    
    private List<TreeNode> helper(int lo, int hi) {
        List<TreeNode> ans = new ArrayList<>();

        if (lo > hi) {
            ans.add(null);
            return ans;
        }
        
        for (int i = lo; i <= hi; i++) {
            List<TreeNode> left = helper(lo, i - 1);
            List<TreeNode> right = helper(i + 1, hi);
            
            for (TreeNode l : left) {
                for (TreeNode r : right) {
                    TreeNode root = new TreeNode(i);
                    root.left = l;
                    root.right = r;
                    ans.add(root);
                }
            }
        }

        return ans;
    }
}

Q-22 :- All Nodes Distance K in Binary Tree
class Solution {
    private void markparent(TreeNode root,HashMap<TreeNode,TreeNode> par,TreeNode tar){
        Queue<TreeNode> q=new LinkedList<>();
        q.offer(root);
        while(!q.isEmpty()){
            TreeNode cur=q.poll();
            if(cur.left!=null){
                par.put(cur.left,cur);
                q.offer(cur.left);
            }
            if(cur.right!=null){
                par.put(cur.right,cur);
                q.offer(cur.right);
            }
        }
    }
    public List<Integer> distanceK(TreeNode root, TreeNode target, int k) {
        HashMap<TreeNode,TreeNode> par=new HashMap<>();
        
        markparent(root,par,root);
        
        Map<TreeNode,Boolean> vis=new HashMap<>();
        
        Queue<TreeNode> q=new LinkedList<>();
        
        q.offer(target);
        
        vis.put(target,true);
        int level=0;
        
        while(!q.isEmpty()){
            int size=q.size();
            if(level==k) break;
            level++;
            
            for(int i=0;i<size;i++){
                TreeNode cur=q.poll();
                if(cur.left!=null && vis.get(cur.left)==null){
                    vis.put(cur.left,true);
                    q.offer(cur.left);
                }
                if(cur.right!=null && vis.get(cur.right)==null){
                    vis.put(cur.right,true);
                    q.offer(cur.right);
                }
                if(par.get(cur)!=null && vis.get(par.get(cur))==null){
                    q.offer(par.get(cur));
                    vis.put(par.get(cur),true);
                }
            }
  
        }
        List<Integer> res=new ArrayList<>();
        while(!q.isEmpty()){
            TreeNode curr=q.poll();
            res.add(curr.val);
        }
        return res;
    }
}

Q-23 :- Validate Binary Search Tree
class Solution {
    class BSTpair{
        boolean isBST;
        long min;
        long max;
        
    }
    public boolean isValidBST(TreeNode root){
        BSTpair rot=isBST(root);
        return rot.isBST;
    }
    public BSTpair isBST(TreeNode root) {
        if(root==null){
            BSTpair bp=new BSTpair();
            bp.min=Long.MAX_VALUE;
            bp.max=Long.MIN_VALUE;
            bp.isBST=true;
            return bp;
        }
        
        BSTpair lp=isBST(root.left);
        BSTpair rp=isBST(root.right);
        BSTpair mp=new BSTpair();
        mp.isBST=lp.isBST && rp.isBST && (root.val>lp.max && root.val<rp.min);
        mp.min=Math.min(root.val,Math.min(lp.min,rp.min)); 
        mp.max=Math.max(root.val,Math.max(lp.max,rp.max));
        
        return mp; 
    }
}

Q-24 :- Binary Tree Right Side View
class Solution {
    public List<Integer> rightSideView(TreeNode root) {
        List<Integer> ans = new ArrayList<>();
        if (root == null) {
            return ans;
        }
        Queue<TreeNode> q = new LinkedList<>();
        q.add(root);
        while (!q.isEmpty()) {
            int size = q.size();
            for (int i = 0; i < size; i++) {
                TreeNode temp = q.poll();
                if (i == size - 1) {
                    ans.add(temp.val);
                }
                if (temp.left != null) {
                    q.add(temp.left);
                }
                if (temp.right != null) {
                    q.add(temp.right);
                }
            }
        }
        return ans;
    }
}

Q-25 :- Redundant Connection
class Solution {
    class DSU {
        int[] parent;

        public DSU(int length){
            parent = new int[length];

            for(int i = 0; i < length; i++){
                parent[i] = i;
            }
        }

        public int find(int x){
            if(x == parent[x])
                return x;

            parent[x] = find(parent[x]);

            return parent[x];
        }

        public void unionSet(int x, int y){

            int parentX = find(x);

            int parentY = find(y);

            parent[parentX] = parentY;

        }
    }
    public int[] findRedundantConnection(int[][] edges) {
        
        int n = edges.length;
        
        DSU dsu = new DSU(n);
        
        for(int[] edge : edges){
            int x = edge[0] - 1;
            int y = edge[1] - 1;
            
            
            int parx = dsu.find(x);
            int pary = dsu.find(y);
            
            if(parx == pary){

                return edge;
            }

            dsu.unionSet(x, y);
        }
        
        return new int[0];
    }
}

Q-26 :- Binary Tree Level Order Traversal
class Solution {
    public List<List<Integer>> levelOrder(TreeNode root) {
        Queue<TreeNode> q = new LinkedList<TreeNode>();
        List<List<Integer>> ans = new LinkedList<List<Integer>>();
        if(root== null) return ans;
        q.offer(root);
        while(!q.isEmpty()){
            int size = q.size();
            List<Integer> subList = new LinkedList<Integer>();
            for(int i=0; i<size; i++) {
                if(q.peek().left != null) q.offer(q.peek().left);
                if(q.peek().right != null) q.offer(q.peek().right);
                subList.add(q.poll().val);
            }
            ans.add(subList);
        }
        return ans;
    }
}

Q-27 :- Path Sum |||
class Solution {
    public int pathSum(TreeNode root, int targetSum) {
        List<Integer> pathsofar = new ArrayList<>();
        
        return getNumberOfPath(root, pathsofar, targetSum);
    }
    
    private int getNumberOfPath(TreeNode node, List<Integer> path, int rem){
        if(node == null){
            return 0;
        }
        
        path.add(node.val);
        int ans = 0, currSum = 0, size = path.size();
        while(--size >= 0){
            currSum += path.get(size);
            if(currSum == rem){
                ans++;
            }
        }
        
        ans += getNumberOfPath(node.left, path, rem);
        ans += getNumberOfPath(node.right, path, rem);
        path.remove(path.size()-1);
        
        return ans;
    }
}

Q-28 :- Construct Binary Tree from Preorder and Postorder Traversal
class Solution {
    int idx=0;
    public  TreeNode constructFromPrePost(int[] preorder, int[] postorder) {
        HashMap<Integer,Integer> map=new HashMap<>();
	    for(int i=0;i<postorder.length;i++) {
	        map.put(postorder[i], i);
	    }
        return helper(preorder,postorder,map,0,postorder.length-1);
	}


	private  TreeNode helper(int[] preorder, int[] postorder,HashMap<Integer, Integer> map, int start, int end) {			if(start>end) {
			return null;
		}
		TreeNode root=new TreeNode(preorder[idx++]);
			
		if(start==end) {
			return root;
		}
			
		int index=map.get(preorder[idx]);
			
		root.left=helper(preorder,postorder,map,start,index);
		root.right=helper(preorder,postorder,map,index+1,end-1);
		return root;
	}
}  

Q-29 :- Unique Binary Search Trees
class Solution {
    public int numTrees(int n) {
        int[] dp=new int[n+1];
        dp[0]=1;
        dp[1]=1;
        for(int i=2;i<=n;i++){
            int l=0;
            int r=i-1;
            while(r>=0){
                dp[i]+=dp[l]*dp[r];
                l++;
                r--;
            }
        }
        return dp[n];
    }
}

Q-30 :- Recover Binary Search Tree
class Solution {
    TreeNode first;
    TreeNode last;
    TreeNode prev;
    TreeNode middle;
    private void inorder(TreeNode root){
        if(root==null){
            return;
        }
        inorder(root.left);
        if(prev!=null && root.val< prev.val){
            if(first==null){
                first=prev;
                middle=root;
            }
            
            else last=root;
        }
        
        prev=root;
        inorder(root.right);
    }
    public void recoverTree(TreeNode root) {
        first=middle=last=null;
        prev=new TreeNode(Integer.MIN_VALUE);
        inorder(root);
        if(first!=null && last!=null){
            int t=first.val;
            first.val=last.val;
            last.val=t;
        }
        else if(first!=null && middle!=null){
            int t=first.val;
            first.val=middle.val;
            middle.val=t;
        }
    }
}

Q-31 :- Populating Next Right Pointers in Each Node
class Solution {
    public Node connect(Node root) {
        
        if(root==null) return root;
        Node prev=root;
        Node cur =null;
        
        while(prev.left!=null){
            cur=prev;
            while(cur!=null){
                cur.left.next=cur.right;
                if(cur.next!=null){
                    cur.right.next=cur.next.left;
                    
                }
                cur=cur.next;
                
            }
            prev=prev.left;
        }
        return root;
    }
}

Q-32 :- Flatten a binary tree to linked list
class Solution {
    private TreeNode prev;
    
    public void flatten(TreeNode root) {
        if(root==null) return;
        
        flatten(root.right);
        flatten(root.left);
        
        root.right=prev;
        
        root.left=null;
        
        prev=root;
    }
}

Q-33 :- Maximum Width of binary tree
class Pair{
    TreeNode node;
    int idx;
    Pair(TreeNode node, int idx) {
        this.node = node;
        this.idx = idx;
    }
}
class Solution {    
    public int widthOfBinaryTree(TreeNode root) {
        int ans = 0;
        if (root == null) return 0;
        ArrayDeque<Pair> q = new ArrayDeque<>();
        q.add(new Pair(root, 0));

        while (!q.isEmpty()) {
            int size = q.size();
            ans = Math.max(ans, q.getLast().idx - q.getFirst().idx + 1);
            for (int i = 0; i < size; i++) {
                Pair p = q.remove();
                TreeNode temp = p.node;
                int idx = p.idx;
                if (temp.left != null) {
                    q.add(new Pair(temp.left, 2 * idx + 1));
                }
                if (temp.right != null) {
                    q.add(new Pair(temp.right, 2 * idx + 2));
                }
            }
        }
        return ans;
    }
}

Q-34 :- Min distance between two given nodes of a Binary Tree
class GfG
{
    int findDist(Node root,int a, int b)
    {

        Node lca = null;
 
        if (isNodePresent(root, a) && isNodePresent(root, b)) {
            lca = findLCA(root, a, b);
        }
        else {
            return Integer.MIN_VALUE;
        }

        return findLevel(lca, a, 0) + findLevel(lca, b, 0);

    }   
    private boolean isNodePresent(Node root, int node)
    {
        // base case
        if (root == null) {
            return false;
        }
 
        if (root.data == node) {
            return true;
        }

        return isNodePresent(root.left, node) || isNodePresent(root.right, node);
    }

    private int findLevel(Node root, int node, int level)
    {

        if (root == null) {
            return Integer.MIN_VALUE;
        }

        if (root.data == node) {
            return level;
        }

        int left = findLevel(root.left, node, level + 1);
 
        if (left != Integer.MIN_VALUE) {
            return left;
        }

        return findLevel(root.right, node, level + 1);
    }

    private Node findLCA(Node root, int x, int y)
    {

        if (root == null) {
            return null;
        }
        if (root.data == x || root.data == y) {
            return root;
        }
 
        Node left = findLCA(root.left, x, y);
 
        Node right = findLCA(root.right, x, y);

        if (left != null && right != null) {
            return root;
        }
 
        if (left != null) {
            return left;
        }

        if (right != null) {
            return right;
        }
 
        return null;
    }
    
}

Q-35 :- Kth smallest element in BST
class Solution {
    int rank = 0;
    int curr;
	private void inorder(TreeNode root, int k) {
        if(root.left != null)  inorder(root.left, k); 
        rank++;
        if(rank == k) { 
            curr = root.val;
            return; 
        }
        if(root.right != null) inorder(root.right, k);
    }
    public int kthSmallest(TreeNode root, int k) {
        inorder(root, k);
        return curr;
    }

}

Q-36 :- Binary Tree Zigzag Level Order Traversal
class Solution {
    public List<List<Integer>> zigzagLevelOrder(TreeNode root) {
        List<List<Integer>> ans = new ArrayList<List<Integer>>();
        Queue<TreeNode> queue=new ArrayDeque<TreeNode>();
        if(root==null) return ans;
        
        queue.add(root);
        boolean flag = true; 
        while(!queue.isEmpty()){
            int levelNum = queue.size();
            List<Integer> subList = new ArrayList<Integer>(levelNum);
            for(int i=0; i<levelNum; i++) {
                int index = i;
                if(queue.peek().left != null) queue.add(queue.peek().left);
                if(queue.peek().right != null) queue.add(queue.peek().right);
                if(flag == true) subList.add(queue.poll().val);
                else subList.add(0, queue.poll().val);
            }
            flag = !flag; 
            ans.add(subList);
        }
        return ans;
        
    }
}

Q-37 :- Count BST node that lie in given range
class Solution
{
    //Function to count number of nodes in BST that lie in the given range.
    int getCount(Node root,int l, int h)
    {
        //Your code here
        if (root == null) {
            return 0;
        }
 
        if (root.data >= l && root.data <= h)
        {
            return 1 + getCount(root.left, l, h) + getCount(root.right, l, h);
        }
 
        if (root.data > h) {
            return getCount(root.left, l, h);
        }
 
        if (root.data < l) {
            return getCount(root.right, l, h);
        }
        return 0;
    }
}

Q-38:- Preorder to postorder
public static Node post_order(int pre[], int size) 
{
    //Your code here
    Node root = new Node(pre[0]);
    Node cur = null;
    
    for(int i=1; i<pre.length; i++){
        cur = root;
        while(true){
            if(cur.data > pre[i]){
                if(cur.left == null){
                    cur.left = new Node(pre[i]);
                    break;
                }else{
                    cur = cur.left;
                }
            }
            else{
                if(cur.right == null){
                    cur.right = new Node(pre[i]);
                    break;
                }else{
                    cur = cur.right;
                }
            }
        }
    }
    return root;
} 


  