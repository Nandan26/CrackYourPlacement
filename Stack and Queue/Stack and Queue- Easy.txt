Q-1 :- Implement Queue Using Stack
class MyQueue {
    Stack<Integer> input = new Stack<>();
    Stack<Integer> output = new Stack<>();

    public MyQueue() {

    }

    public void push(int x) {
        input.push(x);
    }

    public int pop() {
        if (output.empty())
            while (input.empty() == false) {
                output.push(input.peek());
                input.pop();
            }


        int x = output.peek();
        output.pop();
        return x;
    }

    public int peek() {
        if (output.empty())
            while (input.empty() == false) {
                output.push(input.peek());
                input.pop();
            }
        return output.peek();
    }
    int size() {
        return (output.size() + input.size());
    }
}

Q-2 :- Backspace String Compare

class Solution {
    public boolean backspaceCompare(String s, String t) {
        Stack<Character> st1 = new Stack<Character>();
        Stack<Character> st2 = new Stack<Character>();
        for(char ch : s.toCharArray()){
            if(ch == '#'){
                if(!st1.isEmpty())
                    st1.pop();
                continue;
            }
            st1.push(ch);
        }
        for(char ch : t.toCharArray()){
            if(ch == '#'){
                if(!st2.isEmpty())
                    st2.pop();
                continue;
            }
            st2.push(ch);
        }
        String ans1 = "";
        String ans2 = "";
        while(!st1.isEmpty())
            ans1 += st1.pop();
        while(!st2.isEmpty())
            ans2 += st2.pop();
        return ans1.equals(ans2);
    }
}

Q-3 :- Implement Stack using Queue
class MyStack {
    Queue<Integer> q = new LinkedList<>();
    public MyStack() {
        
    }
    
    public void push(int x) {
        q.add(x);
        for (int i = 0; i < q.size() - 1; i++) {
            q.add(q.remove());
        }
    }
    
    public int pop() {
        return q.remove();
    }
    
    public int top() {
        return q.peek();
    }
    
    public boolean empty() {
        return q.size()==0;
    }
}

Q-4 :- Stack - Queue Using Deque
class Stack
{
    Deque<Integer> deque=new Deque<>();
    public void push(int x) {
        deque.addFirst(x);
    }
    public int pop() {
        if (!deque.isEmpty()) {
            return deque.removeFirst();
        }
        return -1;
    }
    public int size() {
        return deque.size();
    }
    public int top(){
        return deque.getLast();
    }
    private boolean isEmpty() { 
        return deque.isEmpty();
    }
}

class Queue
{
    Deque<Integer> deque=new Deque<>();
    public void enqueue(int element)
    {
        deque.addFirst(element);
    }

    public void dequeue()
    {
        if (!deque.isEmpty()) {
            return deque.removeLast();
        }
        return -1;
    }
    private boolean isEmpty() { 
        return deque.isEmpty();
    }

    public int size() {
        return deque.size();
    }
    public int peek(){
        return deque.getFisrt();
    }
}

Q-5 :- Next Greater Element - |
class Solution {
    public int[] nextGreaterElement(int[] nums1, int[] nums2) {
	int m= nums1.length, n= nums2.length;
	int[] stack= new int[n];
	Map<Integer,Integer> next= new HashMap<>();
	for(int i=0, j=-1; i<n; i++){
		while(j!=-1 && nums2[i]>stack[j])
			next.put(stack[j--], nums2[i]);
		stack[++j]= nums2[i];            
	}
	int[] ans= new int[m];
	for(int i=0; i<m; i++)
		ans[i]= next.getOrDefault(nums1[i], -1);
	return ans;
    }
}

Q-6 :- Evaluate Postfix operation
class Solution
{

    public int evaluatePostfix(String exp)
    {
        
        Stack<Integer> st=new Stack<>();
         

        for(int i=0;i<exp.length();i++)
        {
            char c=exp.charAt(i);
             

            if(Character.isDigit(c))
            st.push(c - '0');

            else
            {
                int val1 = st.pop();
                int val2 = st.pop();
                 
                switch(c)
                {
                    case '+':
                    st.push(val2+val1);
                    break;
                     
                    case '-':
                    st.push(val2- val1);
                    break;
                     
                    case '/':
                    st.push(val2/val1);
                    break;
                     
                    case '*':
                    st.push(val2*val1);
                    break;
              
                }
            }
        }
        return st.pop();   
    }
}

Q-7:- Two stacks in an array
/* Structure of the class is
class TwoStack
{

	int size;
	int top1,top2;
	int arr[] = new int[100];

	TwoStack()
	{
		size = 100;
		top1 = -1;
		top2 = size;
	}
}*/
class Stacks {
    
    void push1(int x, TwoStack sq)
    {
        sq.top1++;
        sq.arr[sq.top1] = x;
    }

    void push2(int x, TwoStack sq)
    {
        sq.top2--;
        sq.arr[sq.top2] = x;
        
    }
    
    int pop1(TwoStack sq)
    {
        if(sq.top1==-1)
        return -1;
        return sq.arr[sq.top1--];
    }

    int pop2(TwoStack sq)
    {
        if(sq.top2==100)
        return -1;
        return sq.arr[sq.top2++];
    }
}